/**
 * generated by Xtext 2.12.0
 */
package rover.raspirover.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import rover.raspirover.raspirover.Board;
import rover.raspirover.raspirover.Param;
import rover.raspirover.raspirover.Project;
import rover.raspirover.raspirover.RclBlock;
import rover.raspirover.raspirover.RoverProgram;
import rover.raspirover.xtext.services.RaspiRoverGrammarAccess;

@SuppressWarnings("all")
public class RaspiRoverFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RaspiRoverGrammarAccess _raspiRoverGrammarAccess;
  
  protected void _format(final Project project, @Extension final IFormattableDocument document) {
    EList<Board> _boards = project.getBoards();
    for (final Board board : _boards) {
      document.<Board>format(board);
    }
    document.<RoverProgram>format(project.getProgram());
  }
  
  protected void _format(final RoverProgram roverProgram, @Extension final IFormattableDocument document) {
    EList<Param> _params = roverProgram.getParams();
    for (final Param param : _params) {
      document.<Param>format(param);
    }
    document.<RclBlock>format(roverProgram.getBlock());
  }
  
  public void format(final Object project, final IFormattableDocument document) {
    if (project instanceof XtextResource) {
      _format((XtextResource)project, document);
      return;
    } else if (project instanceof Project) {
      _format((Project)project, document);
      return;
    } else if (project instanceof RoverProgram) {
      _format((RoverProgram)project, document);
      return;
    } else if (project instanceof EObject) {
      _format((EObject)project, document);
      return;
    } else if (project == null) {
      _format((Void)null, document);
      return;
    } else if (project != null) {
      _format(project, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(project, document).toString());
    }
  }
}
