// automatically generated by Xtext
grammar rover.raspirover.xtext.RaspiRover with org.eclipse.xtext.common.Terminals

import "http://rover.raspirover/raspirover/" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Project:
	'raspi-project' '{'
		('boards' '[' boards += Board* ']')?
		program = RoverProgram
	'}'
;

Board:
	RasPiBoard
;

Statement:
	VarAssignment | Conditional | Loop | RclBlock | ForwardAction | ForwardMinAction | BackwardAction |
	BackwardMinAction | TurnAction | TurnDegAction | StopAction | LogAction | SendAction | VarRef
;

RoverValue:
	NumberValue | StringValue | BooleanValue
;

RoverExpression:
	NumericExpression | StringExpression | BooleanExpression
;

Pin:
	Pin_Impl | DigitalPin | AnalogPin
;

NumberValue:
	NumberValue_Impl | TemperatureQuery | HumidityQuery | VarRef
;

Unit:
	Centimeter | Millimeter | Meter | Foot | Inch | Yard | Radian | Degree | Turn | Gradian
;

StringValue:
	StringValue_Impl | MessageQuery | VarRef
;

BooleanValue:
	BooleanValue_Impl | ObstacleQuery | VarRef
;

RoverProgram:
	'program' name = ID '['
		('params' '{' params += Param ("," params += Param)* '}')?
		block = RclBlock
	']'
;

RasPiBoard:
	name = ID
	'{'
		digitalPins += DigitalPin*
		analogPins += AnalogPin
	'}'
;

DigitalPin:
	'digital-pin' name = ID
;

AnalogPin:
	'analog-pin' name = ID
;

Param:
	name = ID
;

RclBlock:
	'{'
		stmts+=Statement+
	'}'
;

VarAssignment:
	'var' name = ID ':=' value = RoverValue
;

Conditional:
	'if' '(' expr = RoverExpression ')'
		condTrue = RclBlock
	'else'
		condFalse = RclBlock
;

Loop:
	'while' '(' expr = RoverExpression ')' '{'
		block = RclBlock
	'}'
;

ForwardAction:
	{ForwardAction}
	'forward'
;

ForwardMinAction:
	{ForwardMinAction}
	'forward' distance = NumberValue
;

BackwardAction:
	{BackwardAction}
	'backward'
;

BackwardMinAction:
	{BackwardMinAction}
	'backward' distance = NumberValue
;

TurnAction:
	{TurnAction}
	'turn'
;

TurnDegAction:
	{TurnDegAction}
	'turn' degrees = NumberValue
;

StopAction:
	{StopAction}
	'stop'
;

LogAction:
	{LogAction}
	'log' message = STRING
;

SendAction:
	{SendAction}
	'send' message = STRING
;

VarRef:
	name = ID
;

TemperatureQuery:
	{TemperatureQuery}
	'query-temp'
;

HumidityQuery:
	{HumidityQuery}
	'query-humidity'
;

MessageQuery:
	{MessageQuery}
	'query-msg'
;

ObstacleQuery:
	{ObstacleQuery}
	'query' (front ?= 'front')? 'obstacle'
;

NumberValue_Impl returns NumberValue:
	{NumberValue}
	quantity = Quantity
;

Quantity:
	{Quantity}
	value = DOUBLE unit = Unit
;

StringValue_Impl returns StringValue:
	{StringValue}
	sValue = STRING
;

BooleanValue_Impl returns BooleanValue:
	{BooleanValue}
	bValue ?= 'true'
;

Centimeter:
	{Centimeter}
	'cm'
;

Millimeter:
	{Millimeter}
	'mm'
;

Meter:
	{Meter}
	'm'
;

Foot:
	{Foot}
	'ft'
;

Inch:
	{Inch}
	'in'
;

Yard:
	{Yard}
	'yd'
;

Radian:
	{Radian}
	'rad'
;

Degree:
	{Degree}
	'deg'
;

Turn:
	{Turn}
	'turn'
;

Gradian:
	{Gradian}
	'grad'
;

NumericExpression:
	{NumericExpression}
	lhs = NumberValue op = NumericOperator rhs = NumberValue
;

StringExpression:
	{StringExpression}
	lhs = StringValue op = StringOperator rhs = StringValue
;

BooleanExpression:
	{BooleanExpression}
	lhs = BooleanValue op = BooleanOperator rhs = BooleanValue
;

enum NumericOperator:
	lt = '<' | eq = '==' | neq = '<>' | gt = '>' | leq = '<=' | geq = '>=';

enum StringOperator:
	eq = '==' | neq = '!=';

enum BooleanOperator:
	eq = '==' | neq = '!=';

Pin_Impl returns Pin:
	'pin' name = ID ('[' level = INT ']')?
;

terminal DOUBLE returns ecore::EDouble:
    INT '.' INT
;
