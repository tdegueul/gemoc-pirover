/*
 * generated by Xtext 2.12.0
 */
package rover.raspirover.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RaspiRoverGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRaspiProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBoardsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBoardsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBoardsBoardParserRuleCall_2_2_0 = (RuleCall)cBoardsAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cProgramAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProgramRoverProgramParserRuleCall_3_0 = (RuleCall)cProgramAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Project:
		//	'raspi-project' '{' ('boards' '[' boards+=Board* ']')?
		//	program=RoverProgram
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'raspi-project' '{' ('boards' '[' boards+=Board* ']')? program=RoverProgram '}'
		public Group getGroup() { return cGroup; }
		
		//'raspi-project'
		public Keyword getRaspiProjectKeyword_0() { return cRaspiProjectKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('boards' '[' boards+=Board* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'boards'
		public Keyword getBoardsKeyword_2_0() { return cBoardsKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//boards+=Board*
		public Assignment getBoardsAssignment_2_2() { return cBoardsAssignment_2_2; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_2_2_0() { return cBoardsBoardParserRuleCall_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//program=RoverProgram
		public Assignment getProgramAssignment_3() { return cProgramAssignment_3; }
		
		//RoverProgram
		public RuleCall getProgramRoverProgramParserRuleCall_3_0() { return cProgramRoverProgramParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Board");
		private final RuleCall cRasPiBoardParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Board:
		//	RasPiBoard;
		@Override public ParserRule getRule() { return rule; }
		
		//RasPiBoard
		public RuleCall getRasPiBoardParserRuleCall() { return cRasPiBoardParserRuleCall; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRclBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForwardActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForwardMinActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBackwardActionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBackwardMinActionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTurnActionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTurnDegActionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cStopActionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLogActionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSendActionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cVarRefParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//Statement:
		//	VarAssignment | Conditional | Loop | RclBlock | ForwardAction | ForwardMinAction | BackwardAction | BackwardMinAction
		//	| TurnAction | TurnDegAction | StopAction | LogAction | SendAction | VarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//VarAssignment | Conditional | Loop | RclBlock | ForwardAction | ForwardMinAction | BackwardAction | BackwardMinAction |
		//TurnAction | TurnDegAction | StopAction | LogAction | SendAction | VarRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarAssignment
		public RuleCall getVarAssignmentParserRuleCall_0() { return cVarAssignmentParserRuleCall_0; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }
		
		//RclBlock
		public RuleCall getRclBlockParserRuleCall_3() { return cRclBlockParserRuleCall_3; }
		
		//ForwardAction
		public RuleCall getForwardActionParserRuleCall_4() { return cForwardActionParserRuleCall_4; }
		
		//ForwardMinAction
		public RuleCall getForwardMinActionParserRuleCall_5() { return cForwardMinActionParserRuleCall_5; }
		
		//BackwardAction
		public RuleCall getBackwardActionParserRuleCall_6() { return cBackwardActionParserRuleCall_6; }
		
		//BackwardMinAction
		public RuleCall getBackwardMinActionParserRuleCall_7() { return cBackwardMinActionParserRuleCall_7; }
		
		//TurnAction
		public RuleCall getTurnActionParserRuleCall_8() { return cTurnActionParserRuleCall_8; }
		
		//TurnDegAction
		public RuleCall getTurnDegActionParserRuleCall_9() { return cTurnDegActionParserRuleCall_9; }
		
		//StopAction
		public RuleCall getStopActionParserRuleCall_10() { return cStopActionParserRuleCall_10; }
		
		//LogAction
		public RuleCall getLogActionParserRuleCall_11() { return cLogActionParserRuleCall_11; }
		
		//SendAction
		public RuleCall getSendActionParserRuleCall_12() { return cSendActionParserRuleCall_12; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_13() { return cVarRefParserRuleCall_13; }
	}
	public class RoverValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.RoverValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RoverValue:
		//	NumberValue | StringValue | BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberValue | StringValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_0() { return cNumberValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
	}
	public class RoverExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.RoverExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RoverExpression:
		//	NumericExpression | StringExpression | BooleanExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericExpression | StringExpression | BooleanExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericExpression
		public RuleCall getNumericExpressionParserRuleCall_0() { return cNumericExpressionParserRuleCall_0; }
		
		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_1() { return cStringExpressionParserRuleCall_1; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_2() { return cBooleanExpressionParserRuleCall_2; }
	}
	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Pin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPin_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDigitalPinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnalogPinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Pin:
		//	Pin_Impl | DigitalPin | AnalogPin;
		@Override public ParserRule getRule() { return rule; }
		
		//Pin_Impl | DigitalPin | AnalogPin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Pin_Impl
		public RuleCall getPin_ImplParserRuleCall_0() { return cPin_ImplParserRuleCall_0; }
		
		//DigitalPin
		public RuleCall getDigitalPinParserRuleCall_1() { return cDigitalPinParserRuleCall_1; }
		
		//AnalogPin
		public RuleCall getAnalogPinParserRuleCall_2() { return cAnalogPinParserRuleCall_2; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.NumberValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberValue_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemperatureQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHumidityQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVarRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumberValue:
		//	NumberValue_Impl | TemperatureQuery | HumidityQuery | VarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberValue_Impl | TemperatureQuery | HumidityQuery | VarRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberValue_Impl
		public RuleCall getNumberValue_ImplParserRuleCall_0() { return cNumberValue_ImplParserRuleCall_0; }
		
		//TemperatureQuery
		public RuleCall getTemperatureQueryParserRuleCall_1() { return cTemperatureQueryParserRuleCall_1; }
		
		//HumidityQuery
		public RuleCall getHumidityQueryParserRuleCall_2() { return cHumidityQueryParserRuleCall_2; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_3() { return cVarRefParserRuleCall_3; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCentimeterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMillimeterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFootParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInchParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cYardParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRadianParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDegreeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTurnParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cGradianParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Unit:
		//	Centimeter | Millimeter | Meter | Foot | Inch | Yard | Radian | Degree | Turn | Gradian;
		@Override public ParserRule getRule() { return rule; }
		
		//Centimeter | Millimeter | Meter | Foot | Inch | Yard | Radian | Degree | Turn | Gradian
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Centimeter
		public RuleCall getCentimeterParserRuleCall_0() { return cCentimeterParserRuleCall_0; }
		
		//Millimeter
		public RuleCall getMillimeterParserRuleCall_1() { return cMillimeterParserRuleCall_1; }
		
		//Meter
		public RuleCall getMeterParserRuleCall_2() { return cMeterParserRuleCall_2; }
		
		//Foot
		public RuleCall getFootParserRuleCall_3() { return cFootParserRuleCall_3; }
		
		//Inch
		public RuleCall getInchParserRuleCall_4() { return cInchParserRuleCall_4; }
		
		//Yard
		public RuleCall getYardParserRuleCall_5() { return cYardParserRuleCall_5; }
		
		//Radian
		public RuleCall getRadianParserRuleCall_6() { return cRadianParserRuleCall_6; }
		
		//Degree
		public RuleCall getDegreeParserRuleCall_7() { return cDegreeParserRuleCall_7; }
		
		//Turn
		public RuleCall getTurnParserRuleCall_8() { return cTurnParserRuleCall_8; }
		
		//Gradian
		public RuleCall getGradianParserRuleCall_9() { return cGradianParserRuleCall_9; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.StringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValue_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StringValue:
		//	StringValue_Impl | MessageQuery | VarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue_Impl | MessageQuery | VarRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue_Impl
		public RuleCall getStringValue_ImplParserRuleCall_0() { return cStringValue_ImplParserRuleCall_0; }
		
		//MessageQuery
		public RuleCall getMessageQueryParserRuleCall_1() { return cMessageQueryParserRuleCall_1; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_2() { return cVarRefParserRuleCall_2; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValue_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObstacleQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BooleanValue:
		//	BooleanValue_Impl | ObstacleQuery | VarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanValue_Impl | ObstacleQuery | VarRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanValue_Impl
		public RuleCall getBooleanValue_ImplParserRuleCall_0() { return cBooleanValue_ImplParserRuleCall_0; }
		
		//ObstacleQuery
		public RuleCall getObstacleQueryParserRuleCall_1() { return cObstacleQueryParserRuleCall_1; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_2() { return cVarRefParserRuleCall_2; }
	}
	public class RoverProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.RoverProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cParamsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_3_2_0 = (RuleCall)cParamsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_3_3_1_0 = (RuleCall)cParamsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockRclBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RoverProgram:
		//	'program' name=ID '[' ('params' '{' params+=Param ("," params+=Param)* '}')?
		//	block=RclBlock
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'program' name=ID '[' ('params' '{' params+=Param ("," params+=Param)* '}')? block=RclBlock ']'
		public Group getGroup() { return cGroup; }
		
		//'program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//('params' '{' params+=Param ("," params+=Param)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'params'
		public Keyword getParamsKeyword_3_0() { return cParamsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//params+=Param
		public Assignment getParamsAssignment_3_2() { return cParamsAssignment_3_2; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_2_0() { return cParamsParamParserRuleCall_3_2_0; }
		
		//("," params+=Param)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_3_3_1() { return cParamsAssignment_3_3_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_3_1_0() { return cParamsParamParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//block=RclBlock
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//RclBlock
		public RuleCall getBlockRclBlockParserRuleCall_4_0() { return cBlockRclBlockParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class RasPiBoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.RasPiBoard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDigitalPinsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDigitalPinsDigitalPinParserRuleCall_2_0 = (RuleCall)cDigitalPinsAssignment_2.eContents().get(0);
		private final Assignment cAnalogPinsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnalogPinsAnalogPinParserRuleCall_3_0 = (RuleCall)cAnalogPinsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RasPiBoard:
		//	name=ID
		//	'{'
		//	digitalPins+=DigitalPin*
		//	analogPins+=AnalogPin
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' digitalPins+=DigitalPin* analogPins+=AnalogPin '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//digitalPins+=DigitalPin*
		public Assignment getDigitalPinsAssignment_2() { return cDigitalPinsAssignment_2; }
		
		//DigitalPin
		public RuleCall getDigitalPinsDigitalPinParserRuleCall_2_0() { return cDigitalPinsDigitalPinParserRuleCall_2_0; }
		
		//analogPins+=AnalogPin
		public Assignment getAnalogPinsAssignment_3() { return cAnalogPinsAssignment_3; }
		
		//AnalogPin
		public RuleCall getAnalogPinsAnalogPinParserRuleCall_3_0() { return cAnalogPinsAnalogPinParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DigitalPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.DigitalPin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitalPinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DigitalPin:
		//	'digital-pin' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'digital-pin' name=ID
		public Group getGroup() { return cGroup; }
		
		//'digital-pin'
		public Keyword getDigitalPinKeyword_0() { return cDigitalPinKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AnalogPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.AnalogPin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalogPinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AnalogPin:
		//	'analog-pin' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'analog-pin' name=ID
		public Group getGroup() { return cGroup; }
		
		//'analog-pin'
		public Keyword getAnalogPinKeyword_0() { return cAnalogPinKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Param");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Param:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RclBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.RclBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStmtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtsStatementParserRuleCall_1_0 = (RuleCall)cStmtsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RclBlock:
		//	'{'
		//	stmts+=Statement+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' stmts+=Statement+ '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//stmts+=Statement+
		public Assignment getStmtsAssignment_1() { return cStmtsAssignment_1; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_1_0() { return cStmtsStatementParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class VarAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.VarAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueRoverValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VarAssignment:
		//	'var' name=ID ':=' value=RoverValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':=' value=RoverValue
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//value=RoverValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//RoverValue
		public RuleCall getValueRoverValueParserRuleCall_3_0() { return cValueRoverValueParserRuleCall_3_0; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprRoverExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCondTrueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCondTrueRclBlockParserRuleCall_4_0 = (RuleCall)cCondTrueAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCondFalseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCondFalseRclBlockParserRuleCall_6_0 = (RuleCall)cCondFalseAssignment_6.eContents().get(0);
		
		//Conditional:
		//	'if' '(' expr=RoverExpression ')'
		//	condTrue=RclBlock
		//	'else'
		//	condFalse=RclBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expr=RoverExpression ')' condTrue=RclBlock 'else' condFalse=RclBlock
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=RoverExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//RoverExpression
		public RuleCall getExprRoverExpressionParserRuleCall_2_0() { return cExprRoverExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//condTrue=RclBlock
		public Assignment getCondTrueAssignment_4() { return cCondTrueAssignment_4; }
		
		//RclBlock
		public RuleCall getCondTrueRclBlockParserRuleCall_4_0() { return cCondTrueRclBlockParserRuleCall_4_0; }
		
		//'else'
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }
		
		//condFalse=RclBlock
		public Assignment getCondFalseAssignment_6() { return cCondFalseAssignment_6; }
		
		//RclBlock
		public RuleCall getCondFalseRclBlockParserRuleCall_6_0() { return cCondFalseRclBlockParserRuleCall_6_0; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprRoverExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockRclBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Loop:
		//	'while' '(' expr=RoverExpression ')' '{'
		//	block=RclBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' expr=RoverExpression ')' '{' block=RclBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=RoverExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//RoverExpression
		public RuleCall getExprRoverExpressionParserRuleCall_2_0() { return cExprRoverExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//block=RclBlock
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//RclBlock
		public RuleCall getBlockRclBlockParserRuleCall_5_0() { return cBlockRclBlockParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ForwardActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.ForwardAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ForwardAction:
		//	{ForwardAction}
		//	'forward';
		@Override public ParserRule getRule() { return rule; }
		
		//{ForwardAction} 'forward'
		public Group getGroup() { return cGroup; }
		
		//{ForwardAction}
		public Action getForwardActionAction_0() { return cForwardActionAction_0; }
		
		//'forward'
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }
	}
	public class ForwardMinActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.ForwardMinAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardMinActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceNumberValueParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		
		//ForwardMinAction:
		//	{ForwardMinAction}
		//	'forward' distance=NumberValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForwardMinAction} 'forward' distance=NumberValue
		public Group getGroup() { return cGroup; }
		
		//{ForwardMinAction}
		public Action getForwardMinActionAction_0() { return cForwardMinActionAction_0; }
		
		//'forward'
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }
		
		//distance=NumberValue
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//NumberValue
		public RuleCall getDistanceNumberValueParserRuleCall_2_0() { return cDistanceNumberValueParserRuleCall_2_0; }
	}
	public class BackwardActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.BackwardAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBackwardActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBackwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BackwardAction:
		//	{BackwardAction}
		//	'backward';
		@Override public ParserRule getRule() { return rule; }
		
		//{BackwardAction} 'backward'
		public Group getGroup() { return cGroup; }
		
		//{BackwardAction}
		public Action getBackwardActionAction_0() { return cBackwardActionAction_0; }
		
		//'backward'
		public Keyword getBackwardKeyword_1() { return cBackwardKeyword_1; }
	}
	public class BackwardMinActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.BackwardMinAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBackwardMinActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBackwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceNumberValueParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		
		//BackwardMinAction:
		//	{BackwardMinAction}
		//	'backward' distance=NumberValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{BackwardMinAction} 'backward' distance=NumberValue
		public Group getGroup() { return cGroup; }
		
		//{BackwardMinAction}
		public Action getBackwardMinActionAction_0() { return cBackwardMinActionAction_0; }
		
		//'backward'
		public Keyword getBackwardKeyword_1() { return cBackwardKeyword_1; }
		
		//distance=NumberValue
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//NumberValue
		public RuleCall getDistanceNumberValueParserRuleCall_2_0() { return cDistanceNumberValueParserRuleCall_2_0; }
	}
	public class TurnActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.TurnAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TurnAction:
		//	{TurnAction}
		//	'turn';
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnAction} 'turn'
		public Group getGroup() { return cGroup; }
		
		//{TurnAction}
		public Action getTurnActionAction_0() { return cTurnActionAction_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1() { return cTurnKeyword_1; }
	}
	public class TurnDegActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.TurnDegAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnDegActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDegreesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDegreesNumberValueParserRuleCall_2_0 = (RuleCall)cDegreesAssignment_2.eContents().get(0);
		
		//TurnDegAction:
		//	{TurnDegAction}
		//	'turn' degrees=NumberValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnDegAction} 'turn' degrees=NumberValue
		public Group getGroup() { return cGroup; }
		
		//{TurnDegAction}
		public Action getTurnDegActionAction_0() { return cTurnDegActionAction_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1() { return cTurnKeyword_1; }
		
		//degrees=NumberValue
		public Assignment getDegreesAssignment_2() { return cDegreesAssignment_2; }
		
		//NumberValue
		public RuleCall getDegreesNumberValueParserRuleCall_2_0() { return cDegreesNumberValueParserRuleCall_2_0; }
	}
	public class StopActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.StopAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StopAction:
		//	{StopAction}
		//	'stop';
		@Override public ParserRule getRule() { return rule; }
		
		//{StopAction} 'stop'
		public Group getGroup() { return cGroup; }
		
		//{StopAction}
		public Action getStopActionAction_0() { return cStopActionAction_0; }
		
		//'stop'
		public Keyword getStopKeyword_1() { return cStopKeyword_1; }
	}
	public class LogActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.LogAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageSTRINGTerminalRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		
		//LogAction:
		//	{LogAction}
		//	'log' message=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogAction} 'log' message=STRING
		public Group getGroup() { return cGroup; }
		
		//{LogAction}
		public Action getLogActionAction_0() { return cLogActionAction_0; }
		
		//'log'
		public Keyword getLogKeyword_1() { return cLogKeyword_1; }
		
		//message=STRING
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_2_0() { return cMessageSTRINGTerminalRuleCall_2_0; }
	}
	public class SendActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.SendAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSendActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSendKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageSTRINGTerminalRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		
		//SendAction:
		//	{SendAction}
		//	'send' message=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{SendAction} 'send' message=STRING
		public Group getGroup() { return cGroup; }
		
		//{SendAction}
		public Action getSendActionAction_0() { return cSendActionAction_0; }
		
		//'send'
		public Keyword getSendKeyword_1() { return cSendKeyword_1; }
		
		//message=STRING
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_2_0() { return cMessageSTRINGTerminalRuleCall_2_0; }
	}
	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.VarRef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VarRef:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TemperatureQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.TemperatureQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTemperatureQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQueryTempKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TemperatureQuery:
		//	{TemperatureQuery}
		//	'query-temp';
		@Override public ParserRule getRule() { return rule; }
		
		//{TemperatureQuery} 'query-temp'
		public Group getGroup() { return cGroup; }
		
		//{TemperatureQuery}
		public Action getTemperatureQueryAction_0() { return cTemperatureQueryAction_0; }
		
		//'query-temp'
		public Keyword getQueryTempKeyword_1() { return cQueryTempKeyword_1; }
	}
	public class HumidityQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.HumidityQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHumidityQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQueryHumidityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//HumidityQuery:
		//	{HumidityQuery}
		//	'query-humidity';
		@Override public ParserRule getRule() { return rule; }
		
		//{HumidityQuery} 'query-humidity'
		public Group getGroup() { return cGroup; }
		
		//{HumidityQuery}
		public Action getHumidityQueryAction_0() { return cHumidityQueryAction_0; }
		
		//'query-humidity'
		public Keyword getQueryHumidityKeyword_1() { return cQueryHumidityKeyword_1; }
	}
	public class MessageQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.MessageQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMessageQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQueryMsgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MessageQuery:
		//	{MessageQuery}
		//	'query-msg';
		@Override public ParserRule getRule() { return rule; }
		
		//{MessageQuery} 'query-msg'
		public Group getGroup() { return cGroup; }
		
		//{MessageQuery}
		public Action getMessageQueryAction_0() { return cMessageQueryAction_0; }
		
		//'query-msg'
		public Keyword getQueryMsgKeyword_1() { return cQueryMsgKeyword_1; }
	}
	public class ObstacleQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.ObstacleQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObstacleQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQueryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFrontAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFrontFrontKeyword_2_0 = (Keyword)cFrontAssignment_2.eContents().get(0);
		private final Keyword cObstacleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObstacleQuery:
		//	{ObstacleQuery}
		//	'query' front?='front'? 'obstacle';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObstacleQuery} 'query' front?='front'? 'obstacle'
		public Group getGroup() { return cGroup; }
		
		//{ObstacleQuery}
		public Action getObstacleQueryAction_0() { return cObstacleQueryAction_0; }
		
		//'query'
		public Keyword getQueryKeyword_1() { return cQueryKeyword_1; }
		
		//front?='front'?
		public Assignment getFrontAssignment_2() { return cFrontAssignment_2; }
		
		//'front'
		public Keyword getFrontFrontKeyword_2_0() { return cFrontFrontKeyword_2_0; }
		
		//'obstacle'
		public Keyword getObstacleKeyword_3() { return cObstacleKeyword_3; }
	}
	public class NumberValue_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.NumberValue_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQuantityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantityQuantityParserRuleCall_1_0 = (RuleCall)cQuantityAssignment_1.eContents().get(0);
		
		//NumberValue_Impl NumberValue:
		//	{NumberValue} quantity=Quantity;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberValue} quantity=Quantity
		public Group getGroup() { return cGroup; }
		
		//{NumberValue}
		public Action getNumberValueAction_0() { return cNumberValueAction_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_1() { return cQuantityAssignment_1; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_1_0() { return cQuantityQuantityParserRuleCall_1_0; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitUnitParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//Quantity:
		//	{Quantity} value=DOUBLE unit=Unit;
		@Override public ParserRule getRule() { return rule; }
		
		//{Quantity} value=DOUBLE unit=Unit
		public Group getGroup() { return cGroup; }
		
		//{Quantity}
		public Action getQuantityAction_0() { return cQuantityAction_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_0() { return cValueDOUBLETerminalRuleCall_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_0() { return cUnitUnitParserRuleCall_2_0; }
	}
	public class StringValue_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.StringValue_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cSValueAssignment_1.eContents().get(0);
		
		//StringValue_Impl StringValue:
		//	{StringValue} sValue=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringValue} sValue=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringValue}
		public Action getStringValueAction_0() { return cStringValueAction_0; }
		
		//sValue=STRING
		public Assignment getSValueAssignment_1() { return cSValueAssignment_1; }
		
		//STRING
		public RuleCall getSValueSTRINGTerminalRuleCall_1_0() { return cSValueSTRINGTerminalRuleCall_1_0; }
	}
	public class BooleanValue_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.BooleanValue_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBValueTrueKeyword_1_0 = (Keyword)cBValueAssignment_1.eContents().get(0);
		
		//BooleanValue_Impl BooleanValue:
		//	{BooleanValue} bValue?='true';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanValue} bValue?='true'
		public Group getGroup() { return cGroup; }
		
		//{BooleanValue}
		public Action getBooleanValueAction_0() { return cBooleanValueAction_0; }
		
		//bValue?='true'
		public Assignment getBValueAssignment_1() { return cBValueAssignment_1; }
		
		//'true'
		public Keyword getBValueTrueKeyword_1_0() { return cBValueTrueKeyword_1_0; }
	}
	public class CentimeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Centimeter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCentimeterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Centimeter:
		//	{Centimeter}
		//	'cm';
		@Override public ParserRule getRule() { return rule; }
		
		//{Centimeter} 'cm'
		public Group getGroup() { return cGroup; }
		
		//{Centimeter}
		public Action getCentimeterAction_0() { return cCentimeterAction_0; }
		
		//'cm'
		public Keyword getCmKeyword_1() { return cCmKeyword_1; }
	}
	public class MillimeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Millimeter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMillimeterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Millimeter:
		//	{Millimeter}
		//	'mm';
		@Override public ParserRule getRule() { return rule; }
		
		//{Millimeter} 'mm'
		public Group getGroup() { return cGroup; }
		
		//{Millimeter}
		public Action getMillimeterAction_0() { return cMillimeterAction_0; }
		
		//'mm'
		public Keyword getMmKeyword_1() { return cMmKeyword_1; }
	}
	public class MeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Meter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Meter:
		//	{Meter}
		//	'm';
		@Override public ParserRule getRule() { return rule; }
		
		//{Meter} 'm'
		public Group getGroup() { return cGroup; }
		
		//{Meter}
		public Action getMeterAction_0() { return cMeterAction_0; }
		
		//'m'
		public Keyword getMKeyword_1() { return cMKeyword_1; }
	}
	public class FootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Foot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFootAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Foot:
		//	{Foot}
		//	'ft';
		@Override public ParserRule getRule() { return rule; }
		
		//{Foot} 'ft'
		public Group getGroup() { return cGroup; }
		
		//{Foot}
		public Action getFootAction_0() { return cFootAction_0; }
		
		//'ft'
		public Keyword getFtKeyword_1() { return cFtKeyword_1; }
	}
	public class InchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Inch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Inch:
		//	{Inch}
		//	'in';
		@Override public ParserRule getRule() { return rule; }
		
		//{Inch} 'in'
		public Group getGroup() { return cGroup; }
		
		//{Inch}
		public Action getInchAction_0() { return cInchAction_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
	}
	public class YardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Yard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cYdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Yard:
		//	{Yard}
		//	'yd';
		@Override public ParserRule getRule() { return rule; }
		
		//{Yard} 'yd'
		public Group getGroup() { return cGroup; }
		
		//{Yard}
		public Action getYardAction_0() { return cYardAction_0; }
		
		//'yd'
		public Keyword getYdKeyword_1() { return cYdKeyword_1; }
	}
	public class RadianElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Radian");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRadianAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRadKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Radian:
		//	{Radian}
		//	'rad';
		@Override public ParserRule getRule() { return rule; }
		
		//{Radian} 'rad'
		public Group getGroup() { return cGroup; }
		
		//{Radian}
		public Action getRadianAction_0() { return cRadianAction_0; }
		
		//'rad'
		public Keyword getRadKeyword_1() { return cRadKeyword_1; }
	}
	public class DegreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Degree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDegreeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDegKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Degree:
		//	{Degree}
		//	'deg';
		@Override public ParserRule getRule() { return rule; }
		
		//{Degree} 'deg'
		public Group getGroup() { return cGroup; }
		
		//{Degree}
		public Action getDegreeAction_0() { return cDegreeAction_0; }
		
		//'deg'
		public Keyword getDegKeyword_1() { return cDegKeyword_1; }
	}
	public class TurnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Turn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Turn:
		//	{Turn}
		//	'turn';
		@Override public ParserRule getRule() { return rule; }
		
		//{Turn} 'turn'
		public Group getGroup() { return cGroup; }
		
		//{Turn}
		public Action getTurnAction_0() { return cTurnAction_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1() { return cTurnKeyword_1; }
	}
	public class GradianElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Gradian");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGradianAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGradKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Gradian:
		//	{Gradian}
		//	'grad';
		@Override public ParserRule getRule() { return rule; }
		
		//{Gradian} 'grad'
		public Group getGroup() { return cGroup; }
		
		//{Gradian}
		public Action getGradianAction_0() { return cGradianAction_0; }
		
		//'grad'
		public Keyword getGradKeyword_1() { return cGradKeyword_1; }
	}
	public class NumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.NumericExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumericExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsNumberValueParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpNumericOperatorEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsNumberValueParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		
		//NumericExpression:
		//	{NumericExpression} lhs=NumberValue op=NumericOperator rhs=NumberValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumericExpression} lhs=NumberValue op=NumericOperator rhs=NumberValue
		public Group getGroup() { return cGroup; }
		
		//{NumericExpression}
		public Action getNumericExpressionAction_0() { return cNumericExpressionAction_0; }
		
		//lhs=NumberValue
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }
		
		//NumberValue
		public RuleCall getLhsNumberValueParserRuleCall_1_0() { return cLhsNumberValueParserRuleCall_1_0; }
		
		//op=NumericOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//NumericOperator
		public RuleCall getOpNumericOperatorEnumRuleCall_2_0() { return cOpNumericOperatorEnumRuleCall_2_0; }
		
		//rhs=NumberValue
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }
		
		//NumberValue
		public RuleCall getRhsNumberValueParserRuleCall_3_0() { return cRhsNumberValueParserRuleCall_3_0; }
	}
	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.StringExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsStringValueParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpStringOperatorEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsStringValueParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		
		//StringExpression:
		//	{StringExpression} lhs=StringValue op=StringOperator rhs=StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringExpression} lhs=StringValue op=StringOperator rhs=StringValue
		public Group getGroup() { return cGroup; }
		
		//{StringExpression}
		public Action getStringExpressionAction_0() { return cStringExpressionAction_0; }
		
		//lhs=StringValue
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }
		
		//StringValue
		public RuleCall getLhsStringValueParserRuleCall_1_0() { return cLhsStringValueParserRuleCall_1_0; }
		
		//op=StringOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//StringOperator
		public RuleCall getOpStringOperatorEnumRuleCall_2_0() { return cOpStringOperatorEnumRuleCall_2_0; }
		
		//rhs=StringValue
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }
		
		//StringValue
		public RuleCall getRhsStringValueParserRuleCall_3_0() { return cRhsStringValueParserRuleCall_3_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsBooleanValueParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBooleanOperatorEnumRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsBooleanValueParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		
		//BooleanExpression:
		//	{BooleanExpression} lhs=BooleanValue op=BooleanOperator rhs=BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanExpression} lhs=BooleanValue op=BooleanOperator rhs=BooleanValue
		public Group getGroup() { return cGroup; }
		
		//{BooleanExpression}
		public Action getBooleanExpressionAction_0() { return cBooleanExpressionAction_0; }
		
		//lhs=BooleanValue
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }
		
		//BooleanValue
		public RuleCall getLhsBooleanValueParserRuleCall_1_0() { return cLhsBooleanValueParserRuleCall_1_0; }
		
		//op=BooleanOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//BooleanOperator
		public RuleCall getOpBooleanOperatorEnumRuleCall_2_0() { return cOpBooleanOperatorEnumRuleCall_2_0; }
		
		//rhs=BooleanValue
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }
		
		//BooleanValue
		public RuleCall getRhsBooleanValueParserRuleCall_3_0() { return cRhsBooleanValueParserRuleCall_3_0; }
	}
	public class Pin_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.Pin_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLevelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLevelINTTerminalRuleCall_2_1_0 = (RuleCall)cLevelAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Pin_Impl Pin:
		//	'pin' name=ID ('[' level=INT ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'pin' name=ID ('[' level=INT ']')?
		public Group getGroup() { return cGroup; }
		
		//'pin'
		public Keyword getPinKeyword_0() { return cPinKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' level=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//level=INT
		public Assignment getLevelAssignment_2_1() { return cLevelAssignment_2_1; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_2_1_0() { return cLevelINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	
	public class NumericOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.NumericOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLtLessThanSignKeyword_0_0 = (Keyword)cLtEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqEqualsSignEqualsSignKeyword_1_0 = (Keyword)cEqEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNeqEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNeqLessThanSignGreaterThanSignKeyword_2_0 = (Keyword)cNeqEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGtGreaterThanSignKeyword_3_0 = (Keyword)cGtEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLeqEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLeqLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLeqEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGeqEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGeqGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeqEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum NumericOperator:
		//	lt='<' | eq='==' | neq='<>' | gt='>' | leq='<=' | geq='>=';
		public EnumRule getRule() { return rule; }
		
		//lt='<' | eq='==' | neq='<>' | gt='>' | leq='<=' | geq='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lt='<'
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_0() { return cLtEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLtLessThanSignKeyword_0_0() { return cLtLessThanSignKeyword_0_0; }
		
		//eq='=='
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_1() { return cEqEnumLiteralDeclaration_1; }
		
		//'=='
		public Keyword getEqEqualsSignEqualsSignKeyword_1_0() { return cEqEqualsSignEqualsSignKeyword_1_0; }
		
		//neq='<>'
		public EnumLiteralDeclaration getNeqEnumLiteralDeclaration_2() { return cNeqEnumLiteralDeclaration_2; }
		
		//'<>'
		public Keyword getNeqLessThanSignGreaterThanSignKeyword_2_0() { return cNeqLessThanSignGreaterThanSignKeyword_2_0; }
		
		//gt='>'
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_3() { return cGtEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getGtGreaterThanSignKeyword_3_0() { return cGtGreaterThanSignKeyword_3_0; }
		
		//leq='<='
		public EnumLiteralDeclaration getLeqEnumLiteralDeclaration_4() { return cLeqEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLeqLessThanSignEqualsSignKeyword_4_0() { return cLeqLessThanSignEqualsSignKeyword_4_0; }
		
		//geq='>='
		public EnumLiteralDeclaration getGeqEnumLiteralDeclaration_5() { return cGeqEnumLiteralDeclaration_5; }
		
		//'>='
		public Keyword getGeqGreaterThanSignEqualsSignKeyword_5_0() { return cGeqGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class StringOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.StringOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNeqEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNeqExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNeqEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StringOperator:
		//	eq='==' | neq='!=';
		public EnumRule getRule() { return rule; }
		
		//eq='==' | neq='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eq='=='
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_0() { return cEqEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEqEqualsSignEqualsSignKeyword_0_0() { return cEqEqualsSignEqualsSignKeyword_0_0; }
		
		//neq='!='
		public EnumLiteralDeclaration getNeqEnumLiteralDeclaration_1() { return cNeqEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNeqExclamationMarkEqualsSignKeyword_1_0() { return cNeqExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class BooleanOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNeqEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNeqExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNeqEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanOperator:
		//	eq='==' | neq='!=';
		public EnumRule getRule() { return rule; }
		
		//eq='==' | neq='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eq='=='
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_0() { return cEqEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEqEqualsSignEqualsSignKeyword_0_0() { return cEqEqualsSignEqualsSignKeyword_0_0; }
		
		//neq='!='
		public EnumLiteralDeclaration getNeqEnumLiteralDeclaration_1() { return cNeqEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNeqExclamationMarkEqualsSignKeyword_1_0() { return cNeqExclamationMarkEqualsSignKeyword_1_0; }
	}
	
	private final ProjectElements pProject;
	private final BoardElements pBoard;
	private final StatementElements pStatement;
	private final RoverValueElements pRoverValue;
	private final RoverExpressionElements pRoverExpression;
	private final PinElements pPin;
	private final NumberValueElements pNumberValue;
	private final UnitElements pUnit;
	private final StringValueElements pStringValue;
	private final BooleanValueElements pBooleanValue;
	private final RoverProgramElements pRoverProgram;
	private final RasPiBoardElements pRasPiBoard;
	private final DigitalPinElements pDigitalPin;
	private final AnalogPinElements pAnalogPin;
	private final ParamElements pParam;
	private final RclBlockElements pRclBlock;
	private final VarAssignmentElements pVarAssignment;
	private final ConditionalElements pConditional;
	private final LoopElements pLoop;
	private final ForwardActionElements pForwardAction;
	private final ForwardMinActionElements pForwardMinAction;
	private final BackwardActionElements pBackwardAction;
	private final BackwardMinActionElements pBackwardMinAction;
	private final TurnActionElements pTurnAction;
	private final TurnDegActionElements pTurnDegAction;
	private final StopActionElements pStopAction;
	private final LogActionElements pLogAction;
	private final SendActionElements pSendAction;
	private final VarRefElements pVarRef;
	private final TemperatureQueryElements pTemperatureQuery;
	private final HumidityQueryElements pHumidityQuery;
	private final MessageQueryElements pMessageQuery;
	private final ObstacleQueryElements pObstacleQuery;
	private final NumberValue_ImplElements pNumberValue_Impl;
	private final QuantityElements pQuantity;
	private final StringValue_ImplElements pStringValue_Impl;
	private final BooleanValue_ImplElements pBooleanValue_Impl;
	private final CentimeterElements pCentimeter;
	private final MillimeterElements pMillimeter;
	private final MeterElements pMeter;
	private final FootElements pFoot;
	private final InchElements pInch;
	private final YardElements pYard;
	private final RadianElements pRadian;
	private final DegreeElements pDegree;
	private final TurnElements pTurn;
	private final GradianElements pGradian;
	private final NumericExpressionElements pNumericExpression;
	private final StringExpressionElements pStringExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final NumericOperatorElements eNumericOperator;
	private final StringOperatorElements eStringOperator;
	private final BooleanOperatorElements eBooleanOperator;
	private final Pin_ImplElements pPin_Impl;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RaspiRoverGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProject = new ProjectElements();
		this.pBoard = new BoardElements();
		this.pStatement = new StatementElements();
		this.pRoverValue = new RoverValueElements();
		this.pRoverExpression = new RoverExpressionElements();
		this.pPin = new PinElements();
		this.pNumberValue = new NumberValueElements();
		this.pUnit = new UnitElements();
		this.pStringValue = new StringValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pRoverProgram = new RoverProgramElements();
		this.pRasPiBoard = new RasPiBoardElements();
		this.pDigitalPin = new DigitalPinElements();
		this.pAnalogPin = new AnalogPinElements();
		this.pParam = new ParamElements();
		this.pRclBlock = new RclBlockElements();
		this.pVarAssignment = new VarAssignmentElements();
		this.pConditional = new ConditionalElements();
		this.pLoop = new LoopElements();
		this.pForwardAction = new ForwardActionElements();
		this.pForwardMinAction = new ForwardMinActionElements();
		this.pBackwardAction = new BackwardActionElements();
		this.pBackwardMinAction = new BackwardMinActionElements();
		this.pTurnAction = new TurnActionElements();
		this.pTurnDegAction = new TurnDegActionElements();
		this.pStopAction = new StopActionElements();
		this.pLogAction = new LogActionElements();
		this.pSendAction = new SendActionElements();
		this.pVarRef = new VarRefElements();
		this.pTemperatureQuery = new TemperatureQueryElements();
		this.pHumidityQuery = new HumidityQueryElements();
		this.pMessageQuery = new MessageQueryElements();
		this.pObstacleQuery = new ObstacleQueryElements();
		this.pNumberValue_Impl = new NumberValue_ImplElements();
		this.pQuantity = new QuantityElements();
		this.pStringValue_Impl = new StringValue_ImplElements();
		this.pBooleanValue_Impl = new BooleanValue_ImplElements();
		this.pCentimeter = new CentimeterElements();
		this.pMillimeter = new MillimeterElements();
		this.pMeter = new MeterElements();
		this.pFoot = new FootElements();
		this.pInch = new InchElements();
		this.pYard = new YardElements();
		this.pRadian = new RadianElements();
		this.pDegree = new DegreeElements();
		this.pTurn = new TurnElements();
		this.pGradian = new GradianElements();
		this.pNumericExpression = new NumericExpressionElements();
		this.pStringExpression = new StringExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.eNumericOperator = new NumericOperatorElements();
		this.eStringOperator = new StringOperatorElements();
		this.eBooleanOperator = new BooleanOperatorElements();
		this.pPin_Impl = new Pin_ImplElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "rover.raspirover.xtext.RaspiRover.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("rover.raspirover.xtext.RaspiRover".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Project:
	//	'raspi-project' '{' ('boards' '[' boards+=Board* ']')?
	//	program=RoverProgram
	//	'}';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Board:
	//	RasPiBoard;
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//Statement:
	//	VarAssignment | Conditional | Loop | RclBlock | ForwardAction | ForwardMinAction | BackwardAction | BackwardMinAction
	//	| TurnAction | TurnDegAction | StopAction | LogAction | SendAction | VarRef;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//RoverValue:
	//	NumberValue | StringValue | BooleanValue;
	public RoverValueElements getRoverValueAccess() {
		return pRoverValue;
	}
	
	public ParserRule getRoverValueRule() {
		return getRoverValueAccess().getRule();
	}
	
	//RoverExpression:
	//	NumericExpression | StringExpression | BooleanExpression;
	public RoverExpressionElements getRoverExpressionAccess() {
		return pRoverExpression;
	}
	
	public ParserRule getRoverExpressionRule() {
		return getRoverExpressionAccess().getRule();
	}
	
	//Pin:
	//	Pin_Impl | DigitalPin | AnalogPin;
	public PinElements getPinAccess() {
		return pPin;
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}
	
	//NumberValue:
	//	NumberValue_Impl | TemperatureQuery | HumidityQuery | VarRef;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//Unit:
	//	Centimeter | Millimeter | Meter | Foot | Inch | Yard | Radian | Degree | Turn | Gradian;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//StringValue:
	//	StringValue_Impl | MessageQuery | VarRef;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BooleanValue:
	//	BooleanValue_Impl | ObstacleQuery | VarRef;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//RoverProgram:
	//	'program' name=ID '[' ('params' '{' params+=Param ("," params+=Param)* '}')?
	//	block=RclBlock
	//	']';
	public RoverProgramElements getRoverProgramAccess() {
		return pRoverProgram;
	}
	
	public ParserRule getRoverProgramRule() {
		return getRoverProgramAccess().getRule();
	}
	
	//RasPiBoard:
	//	name=ID
	//	'{'
	//	digitalPins+=DigitalPin*
	//	analogPins+=AnalogPin
	//	'}';
	public RasPiBoardElements getRasPiBoardAccess() {
		return pRasPiBoard;
	}
	
	public ParserRule getRasPiBoardRule() {
		return getRasPiBoardAccess().getRule();
	}
	
	//DigitalPin:
	//	'digital-pin' name=ID;
	public DigitalPinElements getDigitalPinAccess() {
		return pDigitalPin;
	}
	
	public ParserRule getDigitalPinRule() {
		return getDigitalPinAccess().getRule();
	}
	
	//AnalogPin:
	//	'analog-pin' name=ID;
	public AnalogPinElements getAnalogPinAccess() {
		return pAnalogPin;
	}
	
	public ParserRule getAnalogPinRule() {
		return getAnalogPinAccess().getRule();
	}
	
	//Param:
	//	name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//RclBlock:
	//	'{'
	//	stmts+=Statement+
	//	'}';
	public RclBlockElements getRclBlockAccess() {
		return pRclBlock;
	}
	
	public ParserRule getRclBlockRule() {
		return getRclBlockAccess().getRule();
	}
	
	//VarAssignment:
	//	'var' name=ID ':=' value=RoverValue;
	public VarAssignmentElements getVarAssignmentAccess() {
		return pVarAssignment;
	}
	
	public ParserRule getVarAssignmentRule() {
		return getVarAssignmentAccess().getRule();
	}
	
	//Conditional:
	//	'if' '(' expr=RoverExpression ')'
	//	condTrue=RclBlock
	//	'else'
	//	condFalse=RclBlock;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//Loop:
	//	'while' '(' expr=RoverExpression ')' '{'
	//	block=RclBlock
	//	'}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//ForwardAction:
	//	{ForwardAction}
	//	'forward';
	public ForwardActionElements getForwardActionAccess() {
		return pForwardAction;
	}
	
	public ParserRule getForwardActionRule() {
		return getForwardActionAccess().getRule();
	}
	
	//ForwardMinAction:
	//	{ForwardMinAction}
	//	'forward' distance=NumberValue;
	public ForwardMinActionElements getForwardMinActionAccess() {
		return pForwardMinAction;
	}
	
	public ParserRule getForwardMinActionRule() {
		return getForwardMinActionAccess().getRule();
	}
	
	//BackwardAction:
	//	{BackwardAction}
	//	'backward';
	public BackwardActionElements getBackwardActionAccess() {
		return pBackwardAction;
	}
	
	public ParserRule getBackwardActionRule() {
		return getBackwardActionAccess().getRule();
	}
	
	//BackwardMinAction:
	//	{BackwardMinAction}
	//	'backward' distance=NumberValue;
	public BackwardMinActionElements getBackwardMinActionAccess() {
		return pBackwardMinAction;
	}
	
	public ParserRule getBackwardMinActionRule() {
		return getBackwardMinActionAccess().getRule();
	}
	
	//TurnAction:
	//	{TurnAction}
	//	'turn';
	public TurnActionElements getTurnActionAccess() {
		return pTurnAction;
	}
	
	public ParserRule getTurnActionRule() {
		return getTurnActionAccess().getRule();
	}
	
	//TurnDegAction:
	//	{TurnDegAction}
	//	'turn' degrees=NumberValue;
	public TurnDegActionElements getTurnDegActionAccess() {
		return pTurnDegAction;
	}
	
	public ParserRule getTurnDegActionRule() {
		return getTurnDegActionAccess().getRule();
	}
	
	//StopAction:
	//	{StopAction}
	//	'stop';
	public StopActionElements getStopActionAccess() {
		return pStopAction;
	}
	
	public ParserRule getStopActionRule() {
		return getStopActionAccess().getRule();
	}
	
	//LogAction:
	//	{LogAction}
	//	'log' message=STRING;
	public LogActionElements getLogActionAccess() {
		return pLogAction;
	}
	
	public ParserRule getLogActionRule() {
		return getLogActionAccess().getRule();
	}
	
	//SendAction:
	//	{SendAction}
	//	'send' message=STRING;
	public SendActionElements getSendActionAccess() {
		return pSendAction;
	}
	
	public ParserRule getSendActionRule() {
		return getSendActionAccess().getRule();
	}
	
	//VarRef:
	//	name=ID;
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}
	
	//TemperatureQuery:
	//	{TemperatureQuery}
	//	'query-temp';
	public TemperatureQueryElements getTemperatureQueryAccess() {
		return pTemperatureQuery;
	}
	
	public ParserRule getTemperatureQueryRule() {
		return getTemperatureQueryAccess().getRule();
	}
	
	//HumidityQuery:
	//	{HumidityQuery}
	//	'query-humidity';
	public HumidityQueryElements getHumidityQueryAccess() {
		return pHumidityQuery;
	}
	
	public ParserRule getHumidityQueryRule() {
		return getHumidityQueryAccess().getRule();
	}
	
	//MessageQuery:
	//	{MessageQuery}
	//	'query-msg';
	public MessageQueryElements getMessageQueryAccess() {
		return pMessageQuery;
	}
	
	public ParserRule getMessageQueryRule() {
		return getMessageQueryAccess().getRule();
	}
	
	//ObstacleQuery:
	//	{ObstacleQuery}
	//	'query' front?='front'? 'obstacle';
	public ObstacleQueryElements getObstacleQueryAccess() {
		return pObstacleQuery;
	}
	
	public ParserRule getObstacleQueryRule() {
		return getObstacleQueryAccess().getRule();
	}
	
	//NumberValue_Impl NumberValue:
	//	{NumberValue} quantity=Quantity;
	public NumberValue_ImplElements getNumberValue_ImplAccess() {
		return pNumberValue_Impl;
	}
	
	public ParserRule getNumberValue_ImplRule() {
		return getNumberValue_ImplAccess().getRule();
	}
	
	//Quantity:
	//	{Quantity} value=DOUBLE unit=Unit;
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//StringValue_Impl StringValue:
	//	{StringValue} sValue=STRING;
	public StringValue_ImplElements getStringValue_ImplAccess() {
		return pStringValue_Impl;
	}
	
	public ParserRule getStringValue_ImplRule() {
		return getStringValue_ImplAccess().getRule();
	}
	
	//BooleanValue_Impl BooleanValue:
	//	{BooleanValue} bValue?='true';
	public BooleanValue_ImplElements getBooleanValue_ImplAccess() {
		return pBooleanValue_Impl;
	}
	
	public ParserRule getBooleanValue_ImplRule() {
		return getBooleanValue_ImplAccess().getRule();
	}
	
	//Centimeter:
	//	{Centimeter}
	//	'cm';
	public CentimeterElements getCentimeterAccess() {
		return pCentimeter;
	}
	
	public ParserRule getCentimeterRule() {
		return getCentimeterAccess().getRule();
	}
	
	//Millimeter:
	//	{Millimeter}
	//	'mm';
	public MillimeterElements getMillimeterAccess() {
		return pMillimeter;
	}
	
	public ParserRule getMillimeterRule() {
		return getMillimeterAccess().getRule();
	}
	
	//Meter:
	//	{Meter}
	//	'm';
	public MeterElements getMeterAccess() {
		return pMeter;
	}
	
	public ParserRule getMeterRule() {
		return getMeterAccess().getRule();
	}
	
	//Foot:
	//	{Foot}
	//	'ft';
	public FootElements getFootAccess() {
		return pFoot;
	}
	
	public ParserRule getFootRule() {
		return getFootAccess().getRule();
	}
	
	//Inch:
	//	{Inch}
	//	'in';
	public InchElements getInchAccess() {
		return pInch;
	}
	
	public ParserRule getInchRule() {
		return getInchAccess().getRule();
	}
	
	//Yard:
	//	{Yard}
	//	'yd';
	public YardElements getYardAccess() {
		return pYard;
	}
	
	public ParserRule getYardRule() {
		return getYardAccess().getRule();
	}
	
	//Radian:
	//	{Radian}
	//	'rad';
	public RadianElements getRadianAccess() {
		return pRadian;
	}
	
	public ParserRule getRadianRule() {
		return getRadianAccess().getRule();
	}
	
	//Degree:
	//	{Degree}
	//	'deg';
	public DegreeElements getDegreeAccess() {
		return pDegree;
	}
	
	public ParserRule getDegreeRule() {
		return getDegreeAccess().getRule();
	}
	
	//Turn:
	//	{Turn}
	//	'turn';
	public TurnElements getTurnAccess() {
		return pTurn;
	}
	
	public ParserRule getTurnRule() {
		return getTurnAccess().getRule();
	}
	
	//Gradian:
	//	{Gradian}
	//	'grad';
	public GradianElements getGradianAccess() {
		return pGradian;
	}
	
	public ParserRule getGradianRule() {
		return getGradianAccess().getRule();
	}
	
	//NumericExpression:
	//	{NumericExpression} lhs=NumberValue op=NumericOperator rhs=NumberValue;
	public NumericExpressionElements getNumericExpressionAccess() {
		return pNumericExpression;
	}
	
	public ParserRule getNumericExpressionRule() {
		return getNumericExpressionAccess().getRule();
	}
	
	//StringExpression:
	//	{StringExpression} lhs=StringValue op=StringOperator rhs=StringValue;
	public StringExpressionElements getStringExpressionAccess() {
		return pStringExpression;
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}
	
	//BooleanExpression:
	//	{BooleanExpression} lhs=BooleanValue op=BooleanOperator rhs=BooleanValue;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//enum NumericOperator:
	//	lt='<' | eq='==' | neq='<>' | gt='>' | leq='<=' | geq='>=';
	public NumericOperatorElements getNumericOperatorAccess() {
		return eNumericOperator;
	}
	
	public EnumRule getNumericOperatorRule() {
		return getNumericOperatorAccess().getRule();
	}
	
	//enum StringOperator:
	//	eq='==' | neq='!=';
	public StringOperatorElements getStringOperatorAccess() {
		return eStringOperator;
	}
	
	public EnumRule getStringOperatorRule() {
		return getStringOperatorAccess().getRule();
	}
	
	//enum BooleanOperator:
	//	eq='==' | neq='!=';
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return eBooleanOperator;
	}
	
	public EnumRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//Pin_Impl Pin:
	//	'pin' name=ID ('[' level=INT ']')?;
	public Pin_ImplElements getPin_ImplAccess() {
		return pPin_Impl;
	}
	
	public ParserRule getPin_ImplRule() {
		return getPin_ImplAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
