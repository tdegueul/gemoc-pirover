/*
 * generated by Xtext 2.12.0
 */
grammar InternalRaspiRover;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package rover.raspirover.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package rover.raspirover.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import rover.raspirover.xtext.services.RaspiRoverGrammarAccess;

}

@parser::members {

 	private RaspiRoverGrammarAccess grammarAccess;

    public InternalRaspiRoverParser(TokenStream input, RaspiRoverGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Project";
   	}

   	@Override
   	protected RaspiRoverGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='raspi-project'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getRaspiProjectKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='boards'
			{
				newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getBoardsKeyword_2_0());
			}
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getProjectAccess().getLeftSquareBracketKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectAccess().getBoardsBoardParserRuleCall_2_2_0());
					}
					lv_boards_4_0=ruleBoard
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectRule());
						}
						add(
							$current,
							"boards",
							lv_boards_4_0,
							"rover.raspirover.xtext.RaspiRover.Board");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getProjectAccess().getRightSquareBracketKeyword_2_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getProgramRoverProgramParserRuleCall_3_0());
				}
				lv_program_6_0=ruleRoverProgram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					set(
						$current,
						"program",
						lv_program_6_0,
						"rover.raspirover.xtext.RaspiRover.RoverProgram");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBoard
entryRuleBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoardRule()); }
	iv_ruleBoard=ruleBoard
	{ $current=$iv_ruleBoard.current; }
	EOF;

// Rule Board
ruleBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBoardAccess().getRasPiBoardParserRuleCall());
	}
	this_RasPiBoard_0=ruleRasPiBoard
	{
		$current = $this_RasPiBoard_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVarAssignmentParserRuleCall_0());
		}
		this_VarAssignment_0=ruleVarAssignment
		{
			$current = $this_VarAssignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConditionalParserRuleCall_1());
		}
		this_Conditional_1=ruleConditional
		{
			$current = $this_Conditional_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoopParserRuleCall_2());
		}
		this_Loop_2=ruleLoop
		{
			$current = $this_Loop_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRclBlockParserRuleCall_3());
		}
		this_RclBlock_3=ruleRclBlock
		{
			$current = $this_RclBlock_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForwardActionParserRuleCall_4());
		}
		this_ForwardAction_4=ruleForwardAction
		{
			$current = $this_ForwardAction_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForwardMinActionParserRuleCall_5());
		}
		this_ForwardMinAction_5=ruleForwardMinAction
		{
			$current = $this_ForwardMinAction_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBackwardActionParserRuleCall_6());
		}
		this_BackwardAction_6=ruleBackwardAction
		{
			$current = $this_BackwardAction_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBackwardMinActionParserRuleCall_7());
		}
		this_BackwardMinAction_7=ruleBackwardMinAction
		{
			$current = $this_BackwardMinAction_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTurnActionParserRuleCall_8());
		}
		this_TurnAction_8=ruleTurnAction
		{
			$current = $this_TurnAction_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTurnDegActionParserRuleCall_9());
		}
		this_TurnDegAction_9=ruleTurnDegAction
		{
			$current = $this_TurnDegAction_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStopActionParserRuleCall_10());
		}
		this_StopAction_10=ruleStopAction
		{
			$current = $this_StopAction_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLogActionParserRuleCall_11());
		}
		this_LogAction_11=ruleLogAction
		{
			$current = $this_LogAction_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSendActionParserRuleCall_12());
		}
		this_SendAction_12=ruleSendAction
		{
			$current = $this_SendAction_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVarRefParserRuleCall_13());
		}
		this_VarRef_13=ruleVarRef
		{
			$current = $this_VarRef_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRoverValue
entryRuleRoverValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoverValueRule()); }
	iv_ruleRoverValue=ruleRoverValue
	{ $current=$iv_ruleRoverValue.current; }
	EOF;

// Rule RoverValue
ruleRoverValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRoverValueAccess().getNumberValueParserRuleCall_0());
		}
		this_NumberValue_0=ruleNumberValue
		{
			$current = $this_NumberValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRoverValueAccess().getStringValueParserRuleCall_1());
		}
		this_StringValue_1=ruleStringValue
		{
			$current = $this_StringValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRoverValueAccess().getBooleanValueParserRuleCall_2());
		}
		this_BooleanValue_2=ruleBooleanValue
		{
			$current = $this_BooleanValue_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRoverExpression
entryRuleRoverExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoverExpressionRule()); }
	iv_ruleRoverExpression=ruleRoverExpression
	{ $current=$iv_ruleRoverExpression.current; }
	EOF;

// Rule RoverExpression
ruleRoverExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRoverExpressionAccess().getNumericExpressionParserRuleCall_0());
		}
		this_NumericExpression_0=ruleNumericExpression
		{
			$current = $this_NumericExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRoverExpressionAccess().getStringExpressionParserRuleCall_1());
		}
		this_StringExpression_1=ruleStringExpression
		{
			$current = $this_StringExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRoverExpressionAccess().getBooleanExpressionParserRuleCall_2());
		}
		this_BooleanExpression_2=ruleBooleanExpression
		{
			$current = $this_BooleanExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	iv_ruleNumberValue=ruleNumberValue
	{ $current=$iv_ruleNumberValue.current; }
	EOF;

// Rule NumberValue
ruleNumberValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumberValueAccess().getNumberValue_ImplParserRuleCall_0());
		}
		this_NumberValue_Impl_0=ruleNumberValue_Impl
		{
			$current = $this_NumberValue_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberValueAccess().getTemperatureQueryParserRuleCall_1());
		}
		this_TemperatureQuery_1=ruleTemperatureQuery
		{
			$current = $this_TemperatureQuery_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberValueAccess().getHumidityQueryParserRuleCall_2());
		}
		this_HumidityQuery_2=ruleHumidityQuery
		{
			$current = $this_HumidityQuery_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberValueAccess().getVarRefParserRuleCall_3());
		}
		this_VarRef_3=ruleVarRef
		{
			$current = $this_VarRef_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	iv_ruleUnit=ruleUnit
	{ $current=$iv_ruleUnit.current; }
	EOF;

// Rule Unit
ruleUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnitAccess().getCentimeterParserRuleCall_0());
		}
		this_Centimeter_0=ruleCentimeter
		{
			$current = $this_Centimeter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getMillimeterParserRuleCall_1());
		}
		this_Millimeter_1=ruleMillimeter
		{
			$current = $this_Millimeter_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getMeterParserRuleCall_2());
		}
		this_Meter_2=ruleMeter
		{
			$current = $this_Meter_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getFootParserRuleCall_3());
		}
		this_Foot_3=ruleFoot
		{
			$current = $this_Foot_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getInchParserRuleCall_4());
		}
		this_Inch_4=ruleInch
		{
			$current = $this_Inch_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getYardParserRuleCall_5());
		}
		this_Yard_5=ruleYard
		{
			$current = $this_Yard_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getRadianParserRuleCall_6());
		}
		this_Radian_6=ruleRadian
		{
			$current = $this_Radian_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getDegreeParserRuleCall_7());
		}
		this_Degree_7=ruleDegree
		{
			$current = $this_Degree_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getTurnParserRuleCall_8());
		}
		this_Turn_8=ruleTurn
		{
			$current = $this_Turn_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitAccess().getGradianParserRuleCall_9());
		}
		this_Gradian_9=ruleGradian
		{
			$current = $this_Gradian_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringValueAccess().getStringValue_ImplParserRuleCall_0());
		}
		this_StringValue_Impl_0=ruleStringValue_Impl
		{
			$current = $this_StringValue_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStringValueAccess().getMessageQueryParserRuleCall_1());
		}
		this_MessageQuery_1=ruleMessageQuery
		{
			$current = $this_MessageQuery_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStringValueAccess().getVarRefParserRuleCall_2());
		}
		this_VarRef_2=ruleVarRef
		{
			$current = $this_VarRef_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanValueAccess().getBooleanValue_ImplParserRuleCall_0());
		}
		this_BooleanValue_Impl_0=ruleBooleanValue_Impl
		{
			$current = $this_BooleanValue_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanValueAccess().getObstacleQueryParserRuleCall_1());
		}
		this_ObstacleQuery_1=ruleObstacleQuery
		{
			$current = $this_ObstacleQuery_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanValueAccess().getVarRefParserRuleCall_2());
		}
		this_VarRef_2=ruleVarRef
		{
			$current = $this_VarRef_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRoverProgram
entryRuleRoverProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoverProgramRule()); }
	iv_ruleRoverProgram=ruleRoverProgram
	{ $current=$iv_ruleRoverProgram.current; }
	EOF;

// Rule RoverProgram
ruleRoverProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoverProgramAccess().getProgramKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoverProgramAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoverProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getRoverProgramAccess().getLeftSquareBracketKeyword_2());
		}
		(
			otherlv_3='params'
			{
				newLeafNode(otherlv_3, grammarAccess.getRoverProgramAccess().getParamsKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getRoverProgramAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRoverProgramAccess().getParamsParamParserRuleCall_3_2_0());
					}
					lv_params_5_0=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRoverProgramRule());
						}
						add(
							$current,
							"params",
							lv_params_5_0,
							"rover.raspirover.xtext.RaspiRover.Param");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getRoverProgramAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRoverProgramAccess().getParamsParamParserRuleCall_3_3_1_0());
						}
						lv_params_7_0=ruleParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRoverProgramRule());
							}
							add(
								$current,
								"params",
								lv_params_7_0,
								"rover.raspirover.xtext.RaspiRover.Param");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getRoverProgramAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRoverProgramAccess().getBlockRclBlockParserRuleCall_4_0());
				}
				lv_block_9_0=ruleRclBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoverProgramRule());
					}
					set(
						$current,
						"block",
						lv_block_9_0,
						"rover.raspirover.xtext.RaspiRover.RclBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=']'
		{
			newLeafNode(otherlv_10, grammarAccess.getRoverProgramAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRasPiBoard
entryRuleRasPiBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRasPiBoardRule()); }
	iv_ruleRasPiBoard=ruleRasPiBoard
	{ $current=$iv_ruleRasPiBoard.current; }
	EOF;

// Rule RasPiBoard
ruleRasPiBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRasPiBoardAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRasPiBoardRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getRasPiBoardAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRasPiBoardAccess().getDigitalPinsDigitalPinParserRuleCall_2_0());
				}
				lv_digitalPins_2_0=ruleDigitalPin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRasPiBoardRule());
					}
					add(
						$current,
						"digitalPins",
						lv_digitalPins_2_0,
						"rover.raspirover.xtext.RaspiRover.DigitalPin");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRasPiBoardAccess().getAnalogPinsAnalogPinParserRuleCall_3_0());
				}
				lv_analogPins_3_0=ruleAnalogPin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRasPiBoardRule());
					}
					add(
						$current,
						"analogPins",
						lv_analogPins_3_0,
						"rover.raspirover.xtext.RaspiRover.AnalogPin");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRasPiBoardAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDigitalPin
entryRuleDigitalPin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDigitalPinRule()); }
	iv_ruleDigitalPin=ruleDigitalPin
	{ $current=$iv_ruleDigitalPin.current; }
	EOF;

// Rule DigitalPin
ruleDigitalPin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='digital-pin'
		{
			newLeafNode(otherlv_0, grammarAccess.getDigitalPinAccess().getDigitalPinKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDigitalPinAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDigitalPinRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAnalogPin
entryRuleAnalogPin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnalogPinRule()); }
	iv_ruleAnalogPin=ruleAnalogPin
	{ $current=$iv_ruleAnalogPin.current; }
	EOF;

// Rule AnalogPin
ruleAnalogPin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='analog-pin'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnalogPinAccess().getAnalogPinKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAnalogPinAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnalogPinRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParamRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleRclBlock
entryRuleRclBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRclBlockRule()); }
	iv_ruleRclBlock=ruleRclBlock
	{ $current=$iv_ruleRclBlock.current; }
	EOF;

// Rule RclBlock
ruleRclBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getRclBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRclBlockAccess().getStmtsStatementParserRuleCall_1_0());
				}
				lv_stmts_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRclBlockRule());
					}
					add(
						$current,
						"stmts",
						lv_stmts_1_0,
						"rover.raspirover.xtext.RaspiRover.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getRclBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleVarAssignment
entryRuleVarAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarAssignmentRule()); }
	iv_ruleVarAssignment=ruleVarAssignment
	{ $current=$iv_ruleVarAssignment.current; }
	EOF;

// Rule VarAssignment
ruleVarAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarAssignmentAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVarAssignmentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getVarAssignmentAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarAssignmentAccess().getValueRoverValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleRoverValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"rover.raspirover.xtext.RaspiRover.RoverValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConditional
entryRuleConditional returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current; }
	EOF;

// Rule Conditional
ruleConditional returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getExprRoverExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleRoverExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"rover.raspirover.xtext.RaspiRover.RoverExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionalAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getCondTrueRclBlockParserRuleCall_4_0());
				}
				lv_condTrue_4_0=ruleRclBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"condTrue",
						lv_condTrue_4_0,
						"rover.raspirover.xtext.RaspiRover.RclBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='else'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalAccess().getElseKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getCondFalseRclBlockParserRuleCall_6_0());
				}
				lv_condFalse_6_0=ruleRclBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"condFalse",
						lv_condFalse_6_0,
						"rover.raspirover.xtext.RaspiRover.RclBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getExprRoverExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleRoverExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"rover.raspirover.xtext.RaspiRover.RoverExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getBlockRclBlockParserRuleCall_5_0());
				}
				lv_block_5_0=ruleRclBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"block",
						lv_block_5_0,
						"rover.raspirover.xtext.RaspiRover.RclBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleForwardAction
entryRuleForwardAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardActionRule()); }
	iv_ruleForwardAction=ruleForwardAction
	{ $current=$iv_ruleForwardAction.current; }
	EOF;

// Rule ForwardAction
ruleForwardAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForwardActionAccess().getForwardActionAction_0(),
					$current);
			}
		)
		otherlv_1='forward'
		{
			newLeafNode(otherlv_1, grammarAccess.getForwardActionAccess().getForwardKeyword_1());
		}
	)
;

// Entry rule entryRuleForwardMinAction
entryRuleForwardMinAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardMinActionRule()); }
	iv_ruleForwardMinAction=ruleForwardMinAction
	{ $current=$iv_ruleForwardMinAction.current; }
	EOF;

// Rule ForwardMinAction
ruleForwardMinAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForwardMinActionAccess().getForwardMinActionAction_0(),
					$current);
			}
		)
		otherlv_1='forward'
		{
			newLeafNode(otherlv_1, grammarAccess.getForwardMinActionAccess().getForwardKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForwardMinActionAccess().getDistanceNumberValueParserRuleCall_2_0());
				}
				lv_distance_2_0=ruleNumberValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForwardMinActionRule());
					}
					set(
						$current,
						"distance",
						lv_distance_2_0,
						"rover.raspirover.xtext.RaspiRover.NumberValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBackwardAction
entryRuleBackwardAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackwardActionRule()); }
	iv_ruleBackwardAction=ruleBackwardAction
	{ $current=$iv_ruleBackwardAction.current; }
	EOF;

// Rule BackwardAction
ruleBackwardAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBackwardActionAccess().getBackwardActionAction_0(),
					$current);
			}
		)
		otherlv_1='backward'
		{
			newLeafNode(otherlv_1, grammarAccess.getBackwardActionAccess().getBackwardKeyword_1());
		}
	)
;

// Entry rule entryRuleBackwardMinAction
entryRuleBackwardMinAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackwardMinActionRule()); }
	iv_ruleBackwardMinAction=ruleBackwardMinAction
	{ $current=$iv_ruleBackwardMinAction.current; }
	EOF;

// Rule BackwardMinAction
ruleBackwardMinAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBackwardMinActionAccess().getBackwardMinActionAction_0(),
					$current);
			}
		)
		otherlv_1='backward'
		{
			newLeafNode(otherlv_1, grammarAccess.getBackwardMinActionAccess().getBackwardKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBackwardMinActionAccess().getDistanceNumberValueParserRuleCall_2_0());
				}
				lv_distance_2_0=ruleNumberValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBackwardMinActionRule());
					}
					set(
						$current,
						"distance",
						lv_distance_2_0,
						"rover.raspirover.xtext.RaspiRover.NumberValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTurnAction
entryRuleTurnAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnActionRule()); }
	iv_ruleTurnAction=ruleTurnAction
	{ $current=$iv_ruleTurnAction.current; }
	EOF;

// Rule TurnAction
ruleTurnAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnActionAccess().getTurnActionAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnActionAccess().getTurnKeyword_1());
		}
	)
;

// Entry rule entryRuleTurnDegAction
entryRuleTurnDegAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnDegActionRule()); }
	iv_ruleTurnDegAction=ruleTurnDegAction
	{ $current=$iv_ruleTurnDegAction.current; }
	EOF;

// Rule TurnDegAction
ruleTurnDegAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnDegActionAccess().getTurnDegActionAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnDegActionAccess().getTurnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTurnDegActionAccess().getDegreesNumberValueParserRuleCall_2_0());
				}
				lv_degrees_2_0=ruleNumberValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTurnDegActionRule());
					}
					set(
						$current,
						"degrees",
						lv_degrees_2_0,
						"rover.raspirover.xtext.RaspiRover.NumberValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStopAction
entryRuleStopAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopActionRule()); }
	iv_ruleStopAction=ruleStopAction
	{ $current=$iv_ruleStopAction.current; }
	EOF;

// Rule StopAction
ruleStopAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStopActionAccess().getStopActionAction_0(),
					$current);
			}
		)
		otherlv_1='stop'
		{
			newLeafNode(otherlv_1, grammarAccess.getStopActionAccess().getStopKeyword_1());
		}
	)
;

// Entry rule entryRuleLogAction
entryRuleLogAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogActionRule()); }
	iv_ruleLogAction=ruleLogAction
	{ $current=$iv_ruleLogAction.current; }
	EOF;

// Rule LogAction
ruleLogAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLogActionAccess().getLogActionAction_0(),
					$current);
			}
		)
		otherlv_1='log'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogActionAccess().getLogKeyword_1());
		}
		(
			(
				lv_message_2_0=RULE_STRING
				{
					newLeafNode(lv_message_2_0, grammarAccess.getLogActionAccess().getMessageSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogActionRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSendAction
entryRuleSendAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendActionRule()); }
	iv_ruleSendAction=ruleSendAction
	{ $current=$iv_ruleSendAction.current; }
	EOF;

// Rule SendAction
ruleSendAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSendActionAccess().getSendActionAction_0(),
					$current);
			}
		)
		otherlv_1='send'
		{
			newLeafNode(otherlv_1, grammarAccess.getSendActionAccess().getSendKeyword_1());
		}
		(
			(
				lv_message_2_0=RULE_STRING
				{
					newLeafNode(lv_message_2_0, grammarAccess.getSendActionAccess().getMessageSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSendActionRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleVarRef
entryRuleVarRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRefRule()); }
	iv_ruleVarRef=ruleVarRef
	{ $current=$iv_ruleVarRef.current; }
	EOF;

// Rule VarRef
ruleVarRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVarRefAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRefRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleTemperatureQuery
entryRuleTemperatureQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemperatureQueryRule()); }
	iv_ruleTemperatureQuery=ruleTemperatureQuery
	{ $current=$iv_ruleTemperatureQuery.current; }
	EOF;

// Rule TemperatureQuery
ruleTemperatureQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTemperatureQueryAccess().getTemperatureQueryAction_0(),
					$current);
			}
		)
		otherlv_1='query-temp'
		{
			newLeafNode(otherlv_1, grammarAccess.getTemperatureQueryAccess().getQueryTempKeyword_1());
		}
	)
;

// Entry rule entryRuleHumidityQuery
entryRuleHumidityQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHumidityQueryRule()); }
	iv_ruleHumidityQuery=ruleHumidityQuery
	{ $current=$iv_ruleHumidityQuery.current; }
	EOF;

// Rule HumidityQuery
ruleHumidityQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHumidityQueryAccess().getHumidityQueryAction_0(),
					$current);
			}
		)
		otherlv_1='query-humidity'
		{
			newLeafNode(otherlv_1, grammarAccess.getHumidityQueryAccess().getQueryHumidityKeyword_1());
		}
	)
;

// Entry rule entryRuleMessageQuery
entryRuleMessageQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageQueryRule()); }
	iv_ruleMessageQuery=ruleMessageQuery
	{ $current=$iv_ruleMessageQuery.current; }
	EOF;

// Rule MessageQuery
ruleMessageQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMessageQueryAccess().getMessageQueryAction_0(),
					$current);
			}
		)
		otherlv_1='query-msg'
		{
			newLeafNode(otherlv_1, grammarAccess.getMessageQueryAccess().getQueryMsgKeyword_1());
		}
	)
;

// Entry rule entryRuleObstacleQuery
entryRuleObstacleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObstacleQueryRule()); }
	iv_ruleObstacleQuery=ruleObstacleQuery
	{ $current=$iv_ruleObstacleQuery.current; }
	EOF;

// Rule ObstacleQuery
ruleObstacleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObstacleQueryAccess().getObstacleQueryAction_0(),
					$current);
			}
		)
		otherlv_1='query'
		{
			newLeafNode(otherlv_1, grammarAccess.getObstacleQueryAccess().getQueryKeyword_1());
		}
		(
			(
				lv_front_2_0='front'
				{
					newLeafNode(lv_front_2_0, grammarAccess.getObstacleQueryAccess().getFrontFrontKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObstacleQueryRule());
					}
					setWithLastConsumed($current, "front", true, "front");
				}
			)
		)?
		otherlv_3='obstacle'
		{
			newLeafNode(otherlv_3, grammarAccess.getObstacleQueryAccess().getObstacleKeyword_3());
		}
	)
;

// Entry rule entryRuleNumberValue_Impl
entryRuleNumberValue_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberValue_ImplRule()); }
	iv_ruleNumberValue_Impl=ruleNumberValue_Impl
	{ $current=$iv_ruleNumberValue_Impl.current; }
	EOF;

// Rule NumberValue_Impl
ruleNumberValue_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumberValue_ImplAccess().getNumberValueAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberValue_ImplAccess().getQuantityQuantityParserRuleCall_1_0());
				}
				lv_quantity_1_0=ruleQuantity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberValue_ImplRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_1_0,
						"rover.raspirover.xtext.RaspiRover.Quantity");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQuantity
entryRuleQuantity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantityRule()); }
	iv_ruleQuantity=ruleQuantity
	{ $current=$iv_ruleQuantity.current; }
	EOF;

// Rule Quantity
ruleQuantity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuantityAccess().getQuantityAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_DOUBLE
				{
					newLeafNode(lv_value_1_0, grammarAccess.getQuantityAccess().getValueDOUBLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuantityRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"rover.raspirover.xtext.RaspiRover.DOUBLE");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantityAccess().getUnitUnitParserRuleCall_2_0());
				}
				lv_unit_2_0=ruleUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantityRule());
					}
					set(
						$current,
						"unit",
						lv_unit_2_0,
						"rover.raspirover.xtext.RaspiRover.Unit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStringValue_Impl
entryRuleStringValue_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValue_ImplRule()); }
	iv_ruleStringValue_Impl=ruleStringValue_Impl
	{ $current=$iv_ruleStringValue_Impl.current; }
	EOF;

// Rule StringValue_Impl
ruleStringValue_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringValue_ImplAccess().getStringValueAction_0(),
					$current);
			}
		)
		(
			(
				lv_sValue_1_0=RULE_STRING
				{
					newLeafNode(lv_sValue_1_0, grammarAccess.getStringValue_ImplAccess().getSValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringValue_ImplRule());
					}
					setWithLastConsumed(
						$current,
						"sValue",
						lv_sValue_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanValue_Impl
entryRuleBooleanValue_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValue_ImplRule()); }
	iv_ruleBooleanValue_Impl=ruleBooleanValue_Impl
	{ $current=$iv_ruleBooleanValue_Impl.current; }
	EOF;

// Rule BooleanValue_Impl
ruleBooleanValue_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanValue_ImplAccess().getBooleanValueAction_0(),
					$current);
			}
		)
		(
			(
				lv_bValue_1_0='true'
				{
					newLeafNode(lv_bValue_1_0, grammarAccess.getBooleanValue_ImplAccess().getBValueTrueKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValue_ImplRule());
					}
					setWithLastConsumed($current, "bValue", true, "true");
				}
			)
		)
	)
;

// Entry rule entryRuleCentimeter
entryRuleCentimeter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCentimeterRule()); }
	iv_ruleCentimeter=ruleCentimeter
	{ $current=$iv_ruleCentimeter.current; }
	EOF;

// Rule Centimeter
ruleCentimeter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCentimeterAccess().getCentimeterAction_0(),
					$current);
			}
		)
		otherlv_1='cm'
		{
			newLeafNode(otherlv_1, grammarAccess.getCentimeterAccess().getCmKeyword_1());
		}
	)
;

// Entry rule entryRuleMillimeter
entryRuleMillimeter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMillimeterRule()); }
	iv_ruleMillimeter=ruleMillimeter
	{ $current=$iv_ruleMillimeter.current; }
	EOF;

// Rule Millimeter
ruleMillimeter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMillimeterAccess().getMillimeterAction_0(),
					$current);
			}
		)
		otherlv_1='mm'
		{
			newLeafNode(otherlv_1, grammarAccess.getMillimeterAccess().getMmKeyword_1());
		}
	)
;

// Entry rule entryRuleMeter
entryRuleMeter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMeterRule()); }
	iv_ruleMeter=ruleMeter
	{ $current=$iv_ruleMeter.current; }
	EOF;

// Rule Meter
ruleMeter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMeterAccess().getMeterAction_0(),
					$current);
			}
		)
		otherlv_1='m'
		{
			newLeafNode(otherlv_1, grammarAccess.getMeterAccess().getMKeyword_1());
		}
	)
;

// Entry rule entryRuleFoot
entryRuleFoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFootRule()); }
	iv_ruleFoot=ruleFoot
	{ $current=$iv_ruleFoot.current; }
	EOF;

// Rule Foot
ruleFoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFootAccess().getFootAction_0(),
					$current);
			}
		)
		otherlv_1='ft'
		{
			newLeafNode(otherlv_1, grammarAccess.getFootAccess().getFtKeyword_1());
		}
	)
;

// Entry rule entryRuleInch
entryRuleInch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInchRule()); }
	iv_ruleInch=ruleInch
	{ $current=$iv_ruleInch.current; }
	EOF;

// Rule Inch
ruleInch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInchAccess().getInchAction_0(),
					$current);
			}
		)
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getInchAccess().getInKeyword_1());
		}
	)
;

// Entry rule entryRuleYard
entryRuleYard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYardRule()); }
	iv_ruleYard=ruleYard
	{ $current=$iv_ruleYard.current; }
	EOF;

// Rule Yard
ruleYard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getYardAccess().getYardAction_0(),
					$current);
			}
		)
		otherlv_1='yd'
		{
			newLeafNode(otherlv_1, grammarAccess.getYardAccess().getYdKeyword_1());
		}
	)
;

// Entry rule entryRuleRadian
entryRuleRadian returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRadianRule()); }
	iv_ruleRadian=ruleRadian
	{ $current=$iv_ruleRadian.current; }
	EOF;

// Rule Radian
ruleRadian returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRadianAccess().getRadianAction_0(),
					$current);
			}
		)
		otherlv_1='rad'
		{
			newLeafNode(otherlv_1, grammarAccess.getRadianAccess().getRadKeyword_1());
		}
	)
;

// Entry rule entryRuleDegree
entryRuleDegree returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDegreeRule()); }
	iv_ruleDegree=ruleDegree
	{ $current=$iv_ruleDegree.current; }
	EOF;

// Rule Degree
ruleDegree returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDegreeAccess().getDegreeAction_0(),
					$current);
			}
		)
		otherlv_1='deg'
		{
			newLeafNode(otherlv_1, grammarAccess.getDegreeAccess().getDegKeyword_1());
		}
	)
;

// Entry rule entryRuleTurn
entryRuleTurn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnRule()); }
	iv_ruleTurn=ruleTurn
	{ $current=$iv_ruleTurn.current; }
	EOF;

// Rule Turn
ruleTurn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnAccess().getTurnAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnAccess().getTurnKeyword_1());
		}
	)
;

// Entry rule entryRuleGradian
entryRuleGradian returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGradianRule()); }
	iv_ruleGradian=ruleGradian
	{ $current=$iv_ruleGradian.current; }
	EOF;

// Rule Gradian
ruleGradian returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGradianAccess().getGradianAction_0(),
					$current);
			}
		)
		otherlv_1='grad'
		{
			newLeafNode(otherlv_1, grammarAccess.getGradianAccess().getGradKeyword_1());
		}
	)
;

// Entry rule entryRuleNumericExpression
entryRuleNumericExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericExpressionRule()); }
	iv_ruleNumericExpression=ruleNumericExpression
	{ $current=$iv_ruleNumericExpression.current; }
	EOF;

// Rule NumericExpression
ruleNumericExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumericExpressionAccess().getNumericExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericExpressionAccess().getLhsNumberValueParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleNumberValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_1_0,
						"rover.raspirover.xtext.RaspiRover.NumberValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericExpressionAccess().getOpNumericOperatorEnumRuleCall_2_0());
				}
				lv_op_2_0=ruleNumericOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"rover.raspirover.xtext.RaspiRover.NumericOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericExpressionAccess().getRhsNumberValueParserRuleCall_3_0());
				}
				lv_rhs_3_0=ruleNumberValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_3_0,
						"rover.raspirover.xtext.RaspiRover.NumberValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	iv_ruleStringExpression=ruleStringExpression
	{ $current=$iv_ruleStringExpression.current; }
	EOF;

// Rule StringExpression
ruleStringExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringExpressionAccess().getStringExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringExpressionAccess().getLhsStringValueParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_1_0,
						"rover.raspirover.xtext.RaspiRover.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringExpressionAccess().getOpStringOperatorEnumRuleCall_2_0());
				}
				lv_op_2_0=ruleStringOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringExpressionRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"rover.raspirover.xtext.RaspiRover.StringOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringExpressionAccess().getRhsStringValueParserRuleCall_3_0());
				}
				lv_rhs_3_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringExpressionRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_3_0,
						"rover.raspirover.xtext.RaspiRover.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanExpressionAccess().getLhsBooleanValueParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleBooleanValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_1_0,
						"rover.raspirover.xtext.RaspiRover.BooleanValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOpBooleanOperatorEnumRuleCall_2_0());
				}
				lv_op_2_0=ruleBooleanOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"rover.raspirover.xtext.RaspiRover.BooleanOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanExpressionAccess().getRhsBooleanValueParserRuleCall_3_0());
				}
				lv_rhs_3_0=ruleBooleanValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_3_0,
						"rover.raspirover.xtext.RaspiRover.BooleanValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePin_Impl
entryRulePin_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPin_ImplRule()); }
	iv_rulePin_Impl=rulePin_Impl
	{ $current=$iv_rulePin_Impl.current; }
	EOF;

// Rule Pin_Impl
rulePin_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pin'
		{
			newLeafNode(otherlv_0, grammarAccess.getPin_ImplAccess().getPinKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPin_ImplAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPin_ImplRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getPin_ImplAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					lv_level_3_0=RULE_INT
					{
						newLeafNode(lv_level_3_0, grammarAccess.getPin_ImplAccess().getLevelINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPin_ImplRule());
						}
						setWithLastConsumed(
							$current,
							"level",
							lv_level_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getPin_ImplAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
	)
;

// Rule NumericOperator
ruleNumericOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getNumericOperatorAccess().getLtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNumericOperatorAccess().getLtEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='=='
			{
				$current = grammarAccess.getNumericOperatorAccess().getEqEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNumericOperatorAccess().getEqEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<>'
			{
				$current = grammarAccess.getNumericOperatorAccess().getNeqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNumericOperatorAccess().getNeqEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getNumericOperatorAccess().getGtEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNumericOperatorAccess().getGtEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getNumericOperatorAccess().getLeqEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNumericOperatorAccess().getLeqEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='>='
			{
				$current = grammarAccess.getNumericOperatorAccess().getGeqEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getNumericOperatorAccess().getGeqEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule StringOperator
ruleStringOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getStringOperatorAccess().getEqEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStringOperatorAccess().getEqEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getStringOperatorAccess().getNeqEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStringOperatorAccess().getNeqEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BooleanOperator
ruleBooleanOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getBooleanOperatorAccess().getEqEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanOperatorAccess().getEqEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getBooleanOperatorAccess().getNeqEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanOperatorAccess().getNeqEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
