/*
 * generated by Xtext 2.12.0
 */
package rover.raspirover.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import rover.raspirover.xtext.ide.contentassist.antlr.internal.InternalRaspiRoverParser;
import rover.raspirover.xtext.services.RaspiRoverGrammarAccess;

public class RaspiRoverParser extends AbstractContentAssistParser {

	@Inject
	private RaspiRoverGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRaspiRoverParser createParser() {
		InternalRaspiRoverParser result = new InternalRaspiRoverParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getRoverValueAccess().getAlternatives(), "rule__RoverValue__Alternatives");
					put(grammarAccess.getRoverExpressionAccess().getAlternatives(), "rule__RoverExpression__Alternatives");
					put(grammarAccess.getPinAccess().getAlternatives(), "rule__Pin__Alternatives");
					put(grammarAccess.getNumberValueAccess().getAlternatives(), "rule__NumberValue__Alternatives");
					put(grammarAccess.getUnitAccess().getAlternatives(), "rule__Unit__Alternatives");
					put(grammarAccess.getStringValueAccess().getAlternatives(), "rule__StringValue__Alternatives");
					put(grammarAccess.getBooleanValueAccess().getAlternatives(), "rule__BooleanValue__Alternatives");
					put(grammarAccess.getNumericOperatorAccess().getAlternatives(), "rule__NumericOperator__Alternatives");
					put(grammarAccess.getStringOperatorAccess().getAlternatives(), "rule__StringOperator__Alternatives");
					put(grammarAccess.getBooleanOperatorAccess().getAlternatives(), "rule__BooleanOperator__Alternatives");
					put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
					put(grammarAccess.getProjectAccess().getGroup_2(), "rule__Project__Group_2__0");
					put(grammarAccess.getRoverProgramAccess().getGroup(), "rule__RoverProgram__Group__0");
					put(grammarAccess.getRoverProgramAccess().getGroup_3(), "rule__RoverProgram__Group_3__0");
					put(grammarAccess.getRoverProgramAccess().getGroup_3_3(), "rule__RoverProgram__Group_3_3__0");
					put(grammarAccess.getRasPiBoardAccess().getGroup(), "rule__RasPiBoard__Group__0");
					put(grammarAccess.getDigitalPinAccess().getGroup(), "rule__DigitalPin__Group__0");
					put(grammarAccess.getAnalogPinAccess().getGroup(), "rule__AnalogPin__Group__0");
					put(grammarAccess.getRclBlockAccess().getGroup(), "rule__RclBlock__Group__0");
					put(grammarAccess.getVarAssignmentAccess().getGroup(), "rule__VarAssignment__Group__0");
					put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
					put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
					put(grammarAccess.getForwardActionAccess().getGroup(), "rule__ForwardAction__Group__0");
					put(grammarAccess.getForwardMinActionAccess().getGroup(), "rule__ForwardMinAction__Group__0");
					put(grammarAccess.getBackwardActionAccess().getGroup(), "rule__BackwardAction__Group__0");
					put(grammarAccess.getBackwardMinActionAccess().getGroup(), "rule__BackwardMinAction__Group__0");
					put(grammarAccess.getTurnActionAccess().getGroup(), "rule__TurnAction__Group__0");
					put(grammarAccess.getTurnDegActionAccess().getGroup(), "rule__TurnDegAction__Group__0");
					put(grammarAccess.getStopActionAccess().getGroup(), "rule__StopAction__Group__0");
					put(grammarAccess.getLogActionAccess().getGroup(), "rule__LogAction__Group__0");
					put(grammarAccess.getSendActionAccess().getGroup(), "rule__SendAction__Group__0");
					put(grammarAccess.getTemperatureQueryAccess().getGroup(), "rule__TemperatureQuery__Group__0");
					put(grammarAccess.getHumidityQueryAccess().getGroup(), "rule__HumidityQuery__Group__0");
					put(grammarAccess.getMessageQueryAccess().getGroup(), "rule__MessageQuery__Group__0");
					put(grammarAccess.getObstacleQueryAccess().getGroup(), "rule__ObstacleQuery__Group__0");
					put(grammarAccess.getNumberValue_ImplAccess().getGroup(), "rule__NumberValue_Impl__Group__0");
					put(grammarAccess.getQuantityAccess().getGroup(), "rule__Quantity__Group__0");
					put(grammarAccess.getStringValue_ImplAccess().getGroup(), "rule__StringValue_Impl__Group__0");
					put(grammarAccess.getBooleanValue_ImplAccess().getGroup(), "rule__BooleanValue_Impl__Group__0");
					put(grammarAccess.getCentimeterAccess().getGroup(), "rule__Centimeter__Group__0");
					put(grammarAccess.getMillimeterAccess().getGroup(), "rule__Millimeter__Group__0");
					put(grammarAccess.getMeterAccess().getGroup(), "rule__Meter__Group__0");
					put(grammarAccess.getFootAccess().getGroup(), "rule__Foot__Group__0");
					put(grammarAccess.getInchAccess().getGroup(), "rule__Inch__Group__0");
					put(grammarAccess.getYardAccess().getGroup(), "rule__Yard__Group__0");
					put(grammarAccess.getRadianAccess().getGroup(), "rule__Radian__Group__0");
					put(grammarAccess.getDegreeAccess().getGroup(), "rule__Degree__Group__0");
					put(grammarAccess.getTurnAccess().getGroup(), "rule__Turn__Group__0");
					put(grammarAccess.getGradianAccess().getGroup(), "rule__Gradian__Group__0");
					put(grammarAccess.getNumericExpressionAccess().getGroup(), "rule__NumericExpression__Group__0");
					put(grammarAccess.getStringExpressionAccess().getGroup(), "rule__StringExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getPin_ImplAccess().getGroup(), "rule__Pin_Impl__Group__0");
					put(grammarAccess.getPin_ImplAccess().getGroup_2(), "rule__Pin_Impl__Group_2__0");
					put(grammarAccess.getProjectAccess().getBoardsAssignment_2_2(), "rule__Project__BoardsAssignment_2_2");
					put(grammarAccess.getProjectAccess().getProgramAssignment_3(), "rule__Project__ProgramAssignment_3");
					put(grammarAccess.getRoverProgramAccess().getNameAssignment_1(), "rule__RoverProgram__NameAssignment_1");
					put(grammarAccess.getRoverProgramAccess().getParamsAssignment_3_2(), "rule__RoverProgram__ParamsAssignment_3_2");
					put(grammarAccess.getRoverProgramAccess().getParamsAssignment_3_3_1(), "rule__RoverProgram__ParamsAssignment_3_3_1");
					put(grammarAccess.getRoverProgramAccess().getBlockAssignment_4(), "rule__RoverProgram__BlockAssignment_4");
					put(grammarAccess.getRasPiBoardAccess().getNameAssignment_0(), "rule__RasPiBoard__NameAssignment_0");
					put(grammarAccess.getRasPiBoardAccess().getDigitalPinsAssignment_2(), "rule__RasPiBoard__DigitalPinsAssignment_2");
					put(grammarAccess.getRasPiBoardAccess().getAnalogPinsAssignment_3(), "rule__RasPiBoard__AnalogPinsAssignment_3");
					put(grammarAccess.getDigitalPinAccess().getNameAssignment_1(), "rule__DigitalPin__NameAssignment_1");
					put(grammarAccess.getAnalogPinAccess().getNameAssignment_1(), "rule__AnalogPin__NameAssignment_1");
					put(grammarAccess.getParamAccess().getNameAssignment(), "rule__Param__NameAssignment");
					put(grammarAccess.getRclBlockAccess().getStmtsAssignment_1(), "rule__RclBlock__StmtsAssignment_1");
					put(grammarAccess.getVarAssignmentAccess().getNameAssignment_1(), "rule__VarAssignment__NameAssignment_1");
					put(grammarAccess.getVarAssignmentAccess().getValueAssignment_3(), "rule__VarAssignment__ValueAssignment_3");
					put(grammarAccess.getConditionalAccess().getExprAssignment_2(), "rule__Conditional__ExprAssignment_2");
					put(grammarAccess.getConditionalAccess().getCondTrueAssignment_4(), "rule__Conditional__CondTrueAssignment_4");
					put(grammarAccess.getConditionalAccess().getCondFalseAssignment_6(), "rule__Conditional__CondFalseAssignment_6");
					put(grammarAccess.getLoopAccess().getExprAssignment_2(), "rule__Loop__ExprAssignment_2");
					put(grammarAccess.getLoopAccess().getBlockAssignment_5(), "rule__Loop__BlockAssignment_5");
					put(grammarAccess.getForwardMinActionAccess().getDistanceAssignment_2(), "rule__ForwardMinAction__DistanceAssignment_2");
					put(grammarAccess.getBackwardMinActionAccess().getDistanceAssignment_2(), "rule__BackwardMinAction__DistanceAssignment_2");
					put(grammarAccess.getTurnDegActionAccess().getDegreesAssignment_2(), "rule__TurnDegAction__DegreesAssignment_2");
					put(grammarAccess.getLogActionAccess().getMessageAssignment_2(), "rule__LogAction__MessageAssignment_2");
					put(grammarAccess.getSendActionAccess().getMessageAssignment_2(), "rule__SendAction__MessageAssignment_2");
					put(grammarAccess.getVarRefAccess().getNameAssignment(), "rule__VarRef__NameAssignment");
					put(grammarAccess.getObstacleQueryAccess().getFrontAssignment_2(), "rule__ObstacleQuery__FrontAssignment_2");
					put(grammarAccess.getNumberValue_ImplAccess().getQuantityAssignment_1(), "rule__NumberValue_Impl__QuantityAssignment_1");
					put(grammarAccess.getQuantityAccess().getValueAssignment_1(), "rule__Quantity__ValueAssignment_1");
					put(grammarAccess.getQuantityAccess().getUnitAssignment_2(), "rule__Quantity__UnitAssignment_2");
					put(grammarAccess.getStringValue_ImplAccess().getSValueAssignment_1(), "rule__StringValue_Impl__SValueAssignment_1");
					put(grammarAccess.getBooleanValue_ImplAccess().getBValueAssignment_1(), "rule__BooleanValue_Impl__BValueAssignment_1");
					put(grammarAccess.getNumericExpressionAccess().getLhsAssignment_1(), "rule__NumericExpression__LhsAssignment_1");
					put(grammarAccess.getNumericExpressionAccess().getOpAssignment_2(), "rule__NumericExpression__OpAssignment_2");
					put(grammarAccess.getNumericExpressionAccess().getRhsAssignment_3(), "rule__NumericExpression__RhsAssignment_3");
					put(grammarAccess.getStringExpressionAccess().getLhsAssignment_1(), "rule__StringExpression__LhsAssignment_1");
					put(grammarAccess.getStringExpressionAccess().getOpAssignment_2(), "rule__StringExpression__OpAssignment_2");
					put(grammarAccess.getStringExpressionAccess().getRhsAssignment_3(), "rule__StringExpression__RhsAssignment_3");
					put(grammarAccess.getBooleanExpressionAccess().getLhsAssignment_1(), "rule__BooleanExpression__LhsAssignment_1");
					put(grammarAccess.getBooleanExpressionAccess().getOpAssignment_2(), "rule__BooleanExpression__OpAssignment_2");
					put(grammarAccess.getBooleanExpressionAccess().getRhsAssignment_3(), "rule__BooleanExpression__RhsAssignment_3");
					put(grammarAccess.getPin_ImplAccess().getNameAssignment_1(), "rule__Pin_Impl__NameAssignment_1");
					put(grammarAccess.getPin_ImplAccess().getLevelAssignment_2_1(), "rule__Pin_Impl__LevelAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RaspiRoverGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RaspiRoverGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
