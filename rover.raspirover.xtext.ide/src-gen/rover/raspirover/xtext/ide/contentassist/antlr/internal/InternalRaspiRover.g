/*
 * generated by Xtext 2.12.0
 */
grammar InternalRaspiRover;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package rover.raspirover.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package rover.raspirover.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import rover.raspirover.xtext.services.RaspiRoverGrammarAccess;

}
@parser::members {
	private RaspiRoverGrammarAccess grammarAccess;

	public void setGrammarAccess(RaspiRoverGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProject
entryRuleProject
:
{ before(grammarAccess.getProjectRule()); }
	 ruleProject
{ after(grammarAccess.getProjectRule()); } 
	 EOF 
;

// Rule Project
ruleProject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectAccess().getGroup()); }
		(rule__Project__Group__0)
		{ after(grammarAccess.getProjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoard
entryRuleBoard
:
{ before(grammarAccess.getBoardRule()); }
	 ruleBoard
{ after(grammarAccess.getBoardRule()); } 
	 EOF 
;

// Rule Board
ruleBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardAccess().getRasPiBoardParserRuleCall()); }
		ruleRasPiBoard
		{ after(grammarAccess.getBoardAccess().getRasPiBoardParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoverValue
entryRuleRoverValue
:
{ before(grammarAccess.getRoverValueRule()); }
	 ruleRoverValue
{ after(grammarAccess.getRoverValueRule()); } 
	 EOF 
;

// Rule RoverValue
ruleRoverValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoverValueAccess().getAlternatives()); }
		(rule__RoverValue__Alternatives)
		{ after(grammarAccess.getRoverValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoverExpression
entryRuleRoverExpression
:
{ before(grammarAccess.getRoverExpressionRule()); }
	 ruleRoverExpression
{ after(grammarAccess.getRoverExpressionRule()); } 
	 EOF 
;

// Rule RoverExpression
ruleRoverExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoverExpressionAccess().getAlternatives()); }
		(rule__RoverExpression__Alternatives)
		{ after(grammarAccess.getRoverExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberValue
entryRuleNumberValue
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberValueAccess().getAlternatives()); }
		(rule__NumberValue__Alternatives)
		{ after(grammarAccess.getNumberValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnit
entryRuleUnit
:
{ before(grammarAccess.getUnitRule()); }
	 ruleUnit
{ after(grammarAccess.getUnitRule()); } 
	 EOF 
;

// Rule Unit
ruleUnit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnitAccess().getAlternatives()); }
		(rule__Unit__Alternatives)
		{ after(grammarAccess.getUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getAlternatives()); }
		(rule__StringValue__Alternatives)
		{ after(grammarAccess.getStringValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanValueAccess().getAlternatives()); }
		(rule__BooleanValue__Alternatives)
		{ after(grammarAccess.getBooleanValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoverProgram
entryRuleRoverProgram
:
{ before(grammarAccess.getRoverProgramRule()); }
	 ruleRoverProgram
{ after(grammarAccess.getRoverProgramRule()); } 
	 EOF 
;

// Rule RoverProgram
ruleRoverProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoverProgramAccess().getGroup()); }
		(rule__RoverProgram__Group__0)
		{ after(grammarAccess.getRoverProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRasPiBoard
entryRuleRasPiBoard
:
{ before(grammarAccess.getRasPiBoardRule()); }
	 ruleRasPiBoard
{ after(grammarAccess.getRasPiBoardRule()); } 
	 EOF 
;

// Rule RasPiBoard
ruleRasPiBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRasPiBoardAccess().getGroup()); }
		(rule__RasPiBoard__Group__0)
		{ after(grammarAccess.getRasPiBoardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDigitalPin
entryRuleDigitalPin
:
{ before(grammarAccess.getDigitalPinRule()); }
	 ruleDigitalPin
{ after(grammarAccess.getDigitalPinRule()); } 
	 EOF 
;

// Rule DigitalPin
ruleDigitalPin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDigitalPinAccess().getGroup()); }
		(rule__DigitalPin__Group__0)
		{ after(grammarAccess.getDigitalPinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnalogPin
entryRuleAnalogPin
:
{ before(grammarAccess.getAnalogPinRule()); }
	 ruleAnalogPin
{ after(grammarAccess.getAnalogPinRule()); } 
	 EOF 
;

// Rule AnalogPin
ruleAnalogPin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnalogPinAccess().getGroup()); }
		(rule__AnalogPin__Group__0)
		{ after(grammarAccess.getAnalogPinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParam
entryRuleParam
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAccess().getNameAssignment()); }
		(rule__Param__NameAssignment)
		{ after(grammarAccess.getParamAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRclBlock
entryRuleRclBlock
:
{ before(grammarAccess.getRclBlockRule()); }
	 ruleRclBlock
{ after(grammarAccess.getRclBlockRule()); } 
	 EOF 
;

// Rule RclBlock
ruleRclBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRclBlockAccess().getGroup()); }
		(rule__RclBlock__Group__0)
		{ after(grammarAccess.getRclBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarAssignment
entryRuleVarAssignment
:
{ before(grammarAccess.getVarAssignmentRule()); }
	 ruleVarAssignment
{ after(grammarAccess.getVarAssignmentRule()); } 
	 EOF 
;

// Rule VarAssignment
ruleVarAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAssignmentAccess().getGroup()); }
		(rule__VarAssignment__Group__0)
		{ after(grammarAccess.getVarAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditional
entryRuleConditional
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalAccess().getGroup()); }
		(rule__Conditional__Group__0)
		{ after(grammarAccess.getConditionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForwardAction
entryRuleForwardAction
:
{ before(grammarAccess.getForwardActionRule()); }
	 ruleForwardAction
{ after(grammarAccess.getForwardActionRule()); } 
	 EOF 
;

// Rule ForwardAction
ruleForwardAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardActionAccess().getGroup()); }
		(rule__ForwardAction__Group__0)
		{ after(grammarAccess.getForwardActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForwardMinAction
entryRuleForwardMinAction
:
{ before(grammarAccess.getForwardMinActionRule()); }
	 ruleForwardMinAction
{ after(grammarAccess.getForwardMinActionRule()); } 
	 EOF 
;

// Rule ForwardMinAction
ruleForwardMinAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardMinActionAccess().getGroup()); }
		(rule__ForwardMinAction__Group__0)
		{ after(grammarAccess.getForwardMinActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBackwardAction
entryRuleBackwardAction
:
{ before(grammarAccess.getBackwardActionRule()); }
	 ruleBackwardAction
{ after(grammarAccess.getBackwardActionRule()); } 
	 EOF 
;

// Rule BackwardAction
ruleBackwardAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBackwardActionAccess().getGroup()); }
		(rule__BackwardAction__Group__0)
		{ after(grammarAccess.getBackwardActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBackwardMinAction
entryRuleBackwardMinAction
:
{ before(grammarAccess.getBackwardMinActionRule()); }
	 ruleBackwardMinAction
{ after(grammarAccess.getBackwardMinActionRule()); } 
	 EOF 
;

// Rule BackwardMinAction
ruleBackwardMinAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBackwardMinActionAccess().getGroup()); }
		(rule__BackwardMinAction__Group__0)
		{ after(grammarAccess.getBackwardMinActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnAction
entryRuleTurnAction
:
{ before(grammarAccess.getTurnActionRule()); }
	 ruleTurnAction
{ after(grammarAccess.getTurnActionRule()); } 
	 EOF 
;

// Rule TurnAction
ruleTurnAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnActionAccess().getGroup()); }
		(rule__TurnAction__Group__0)
		{ after(grammarAccess.getTurnActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnDegAction
entryRuleTurnDegAction
:
{ before(grammarAccess.getTurnDegActionRule()); }
	 ruleTurnDegAction
{ after(grammarAccess.getTurnDegActionRule()); } 
	 EOF 
;

// Rule TurnDegAction
ruleTurnDegAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnDegActionAccess().getGroup()); }
		(rule__TurnDegAction__Group__0)
		{ after(grammarAccess.getTurnDegActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStopAction
entryRuleStopAction
:
{ before(grammarAccess.getStopActionRule()); }
	 ruleStopAction
{ after(grammarAccess.getStopActionRule()); } 
	 EOF 
;

// Rule StopAction
ruleStopAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopActionAccess().getGroup()); }
		(rule__StopAction__Group__0)
		{ after(grammarAccess.getStopActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogAction
entryRuleLogAction
:
{ before(grammarAccess.getLogActionRule()); }
	 ruleLogAction
{ after(grammarAccess.getLogActionRule()); } 
	 EOF 
;

// Rule LogAction
ruleLogAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogActionAccess().getGroup()); }
		(rule__LogAction__Group__0)
		{ after(grammarAccess.getLogActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSendAction
entryRuleSendAction
:
{ before(grammarAccess.getSendActionRule()); }
	 ruleSendAction
{ after(grammarAccess.getSendActionRule()); } 
	 EOF 
;

// Rule SendAction
ruleSendAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSendActionAccess().getGroup()); }
		(rule__SendAction__Group__0)
		{ after(grammarAccess.getSendActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarRef
entryRuleVarRef
:
{ before(grammarAccess.getVarRefRule()); }
	 ruleVarRef
{ after(grammarAccess.getVarRefRule()); } 
	 EOF 
;

// Rule VarRef
ruleVarRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarRefAccess().getNameAssignment()); }
		(rule__VarRef__NameAssignment)
		{ after(grammarAccess.getVarRefAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemperatureQuery
entryRuleTemperatureQuery
:
{ before(grammarAccess.getTemperatureQueryRule()); }
	 ruleTemperatureQuery
{ after(grammarAccess.getTemperatureQueryRule()); } 
	 EOF 
;

// Rule TemperatureQuery
ruleTemperatureQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemperatureQueryAccess().getGroup()); }
		(rule__TemperatureQuery__Group__0)
		{ after(grammarAccess.getTemperatureQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHumidityQuery
entryRuleHumidityQuery
:
{ before(grammarAccess.getHumidityQueryRule()); }
	 ruleHumidityQuery
{ after(grammarAccess.getHumidityQueryRule()); } 
	 EOF 
;

// Rule HumidityQuery
ruleHumidityQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHumidityQueryAccess().getGroup()); }
		(rule__HumidityQuery__Group__0)
		{ after(grammarAccess.getHumidityQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMessageQuery
entryRuleMessageQuery
:
{ before(grammarAccess.getMessageQueryRule()); }
	 ruleMessageQuery
{ after(grammarAccess.getMessageQueryRule()); } 
	 EOF 
;

// Rule MessageQuery
ruleMessageQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMessageQueryAccess().getGroup()); }
		(rule__MessageQuery__Group__0)
		{ after(grammarAccess.getMessageQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObstacleQuery
entryRuleObstacleQuery
:
{ before(grammarAccess.getObstacleQueryRule()); }
	 ruleObstacleQuery
{ after(grammarAccess.getObstacleQueryRule()); } 
	 EOF 
;

// Rule ObstacleQuery
ruleObstacleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObstacleQueryAccess().getGroup()); }
		(rule__ObstacleQuery__Group__0)
		{ after(grammarAccess.getObstacleQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberValue_Impl
entryRuleNumberValue_Impl
:
{ before(grammarAccess.getNumberValue_ImplRule()); }
	 ruleNumberValue_Impl
{ after(grammarAccess.getNumberValue_ImplRule()); } 
	 EOF 
;

// Rule NumberValue_Impl
ruleNumberValue_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberValue_ImplAccess().getGroup()); }
		(rule__NumberValue_Impl__Group__0)
		{ after(grammarAccess.getNumberValue_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantity
entryRuleQuantity
:
{ before(grammarAccess.getQuantityRule()); }
	 ruleQuantity
{ after(grammarAccess.getQuantityRule()); } 
	 EOF 
;

// Rule Quantity
ruleQuantity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantityAccess().getGroup()); }
		(rule__Quantity__Group__0)
		{ after(grammarAccess.getQuantityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue_Impl
entryRuleStringValue_Impl
:
{ before(grammarAccess.getStringValue_ImplRule()); }
	 ruleStringValue_Impl
{ after(grammarAccess.getStringValue_ImplRule()); } 
	 EOF 
;

// Rule StringValue_Impl
ruleStringValue_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValue_ImplAccess().getGroup()); }
		(rule__StringValue_Impl__Group__0)
		{ after(grammarAccess.getStringValue_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanValue_Impl
entryRuleBooleanValue_Impl
:
{ before(grammarAccess.getBooleanValue_ImplRule()); }
	 ruleBooleanValue_Impl
{ after(grammarAccess.getBooleanValue_ImplRule()); } 
	 EOF 
;

// Rule BooleanValue_Impl
ruleBooleanValue_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanValue_ImplAccess().getGroup()); }
		(rule__BooleanValue_Impl__Group__0)
		{ after(grammarAccess.getBooleanValue_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCentimeter
entryRuleCentimeter
:
{ before(grammarAccess.getCentimeterRule()); }
	 ruleCentimeter
{ after(grammarAccess.getCentimeterRule()); } 
	 EOF 
;

// Rule Centimeter
ruleCentimeter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCentimeterAccess().getGroup()); }
		(rule__Centimeter__Group__0)
		{ after(grammarAccess.getCentimeterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMillimeter
entryRuleMillimeter
:
{ before(grammarAccess.getMillimeterRule()); }
	 ruleMillimeter
{ after(grammarAccess.getMillimeterRule()); } 
	 EOF 
;

// Rule Millimeter
ruleMillimeter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMillimeterAccess().getGroup()); }
		(rule__Millimeter__Group__0)
		{ after(grammarAccess.getMillimeterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMeter
entryRuleMeter
:
{ before(grammarAccess.getMeterRule()); }
	 ruleMeter
{ after(grammarAccess.getMeterRule()); } 
	 EOF 
;

// Rule Meter
ruleMeter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeterAccess().getGroup()); }
		(rule__Meter__Group__0)
		{ after(grammarAccess.getMeterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFoot
entryRuleFoot
:
{ before(grammarAccess.getFootRule()); }
	 ruleFoot
{ after(grammarAccess.getFootRule()); } 
	 EOF 
;

// Rule Foot
ruleFoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFootAccess().getGroup()); }
		(rule__Foot__Group__0)
		{ after(grammarAccess.getFootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInch
entryRuleInch
:
{ before(grammarAccess.getInchRule()); }
	 ruleInch
{ after(grammarAccess.getInchRule()); } 
	 EOF 
;

// Rule Inch
ruleInch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInchAccess().getGroup()); }
		(rule__Inch__Group__0)
		{ after(grammarAccess.getInchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleYard
entryRuleYard
:
{ before(grammarAccess.getYardRule()); }
	 ruleYard
{ after(grammarAccess.getYardRule()); } 
	 EOF 
;

// Rule Yard
ruleYard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYardAccess().getGroup()); }
		(rule__Yard__Group__0)
		{ after(grammarAccess.getYardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRadian
entryRuleRadian
:
{ before(grammarAccess.getRadianRule()); }
	 ruleRadian
{ after(grammarAccess.getRadianRule()); } 
	 EOF 
;

// Rule Radian
ruleRadian 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRadianAccess().getGroup()); }
		(rule__Radian__Group__0)
		{ after(grammarAccess.getRadianAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDegree
entryRuleDegree
:
{ before(grammarAccess.getDegreeRule()); }
	 ruleDegree
{ after(grammarAccess.getDegreeRule()); } 
	 EOF 
;

// Rule Degree
ruleDegree 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDegreeAccess().getGroup()); }
		(rule__Degree__Group__0)
		{ after(grammarAccess.getDegreeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurn
entryRuleTurn
:
{ before(grammarAccess.getTurnRule()); }
	 ruleTurn
{ after(grammarAccess.getTurnRule()); } 
	 EOF 
;

// Rule Turn
ruleTurn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnAccess().getGroup()); }
		(rule__Turn__Group__0)
		{ after(grammarAccess.getTurnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGradian
entryRuleGradian
:
{ before(grammarAccess.getGradianRule()); }
	 ruleGradian
{ after(grammarAccess.getGradianRule()); } 
	 EOF 
;

// Rule Gradian
ruleGradian 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGradianAccess().getGroup()); }
		(rule__Gradian__Group__0)
		{ after(grammarAccess.getGradianAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericExpression
entryRuleNumericExpression
:
{ before(grammarAccess.getNumericExpressionRule()); }
	 ruleNumericExpression
{ after(grammarAccess.getNumericExpressionRule()); } 
	 EOF 
;

// Rule NumericExpression
ruleNumericExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericExpressionAccess().getGroup()); }
		(rule__NumericExpression__Group__0)
		{ after(grammarAccess.getNumericExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getGroup()); }
		(rule__StringExpression__Group__0)
		{ after(grammarAccess.getStringExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getGroup()); }
		(rule__BooleanExpression__Group__0)
		{ after(grammarAccess.getBooleanExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePin_Impl
entryRulePin_Impl
:
{ before(grammarAccess.getPin_ImplRule()); }
	 rulePin_Impl
{ after(grammarAccess.getPin_ImplRule()); } 
	 EOF 
;

// Rule Pin_Impl
rulePin_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPin_ImplAccess().getGroup()); }
		(rule__Pin_Impl__Group__0)
		{ after(grammarAccess.getPin_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule NumericOperator
ruleNumericOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericOperatorAccess().getAlternatives()); }
		(rule__NumericOperator__Alternatives)
		{ after(grammarAccess.getNumericOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule StringOperator
ruleStringOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringOperatorAccess().getAlternatives()); }
		(rule__StringOperator__Alternatives)
		{ after(grammarAccess.getStringOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BooleanOperator
ruleBooleanOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
		(rule__BooleanOperator__Alternatives)
		{ after(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getVarAssignmentParserRuleCall_0()); }
		ruleVarAssignment
		{ after(grammarAccess.getStatementAccess().getVarAssignmentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getConditionalParserRuleCall_1()); }
		ruleConditional
		{ after(grammarAccess.getStatementAccess().getConditionalParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLoopParserRuleCall_2()); }
		ruleLoop
		{ after(grammarAccess.getStatementAccess().getLoopParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRclBlockParserRuleCall_3()); }
		ruleRclBlock
		{ after(grammarAccess.getStatementAccess().getRclBlockParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForwardActionParserRuleCall_4()); }
		ruleForwardAction
		{ after(grammarAccess.getStatementAccess().getForwardActionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForwardMinActionParserRuleCall_5()); }
		ruleForwardMinAction
		{ after(grammarAccess.getStatementAccess().getForwardMinActionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBackwardActionParserRuleCall_6()); }
		ruleBackwardAction
		{ after(grammarAccess.getStatementAccess().getBackwardActionParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBackwardMinActionParserRuleCall_7()); }
		ruleBackwardMinAction
		{ after(grammarAccess.getStatementAccess().getBackwardMinActionParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTurnActionParserRuleCall_8()); }
		ruleTurnAction
		{ after(grammarAccess.getStatementAccess().getTurnActionParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTurnDegActionParserRuleCall_9()); }
		ruleTurnDegAction
		{ after(grammarAccess.getStatementAccess().getTurnDegActionParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getStopActionParserRuleCall_10()); }
		ruleStopAction
		{ after(grammarAccess.getStatementAccess().getStopActionParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLogActionParserRuleCall_11()); }
		ruleLogAction
		{ after(grammarAccess.getStatementAccess().getLogActionParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSendActionParserRuleCall_12()); }
		ruleSendAction
		{ after(grammarAccess.getStatementAccess().getSendActionParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVarRefParserRuleCall_13()); }
		ruleVarRef
		{ after(grammarAccess.getStatementAccess().getVarRefParserRuleCall_13()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoverValueAccess().getNumberValueParserRuleCall_0()); }
		ruleNumberValue
		{ after(grammarAccess.getRoverValueAccess().getNumberValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRoverValueAccess().getStringValueParserRuleCall_1()); }
		ruleStringValue
		{ after(grammarAccess.getRoverValueAccess().getStringValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRoverValueAccess().getBooleanValueParserRuleCall_2()); }
		ruleBooleanValue
		{ after(grammarAccess.getRoverValueAccess().getBooleanValueParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoverExpressionAccess().getNumericExpressionParserRuleCall_0()); }
		ruleNumericExpression
		{ after(grammarAccess.getRoverExpressionAccess().getNumericExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRoverExpressionAccess().getStringExpressionParserRuleCall_1()); }
		ruleStringExpression
		{ after(grammarAccess.getRoverExpressionAccess().getStringExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRoverExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
		ruleBooleanExpression
		{ after(grammarAccess.getRoverExpressionAccess().getBooleanExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValueAccess().getNumberValue_ImplParserRuleCall_0()); }
		ruleNumberValue_Impl
		{ after(grammarAccess.getNumberValueAccess().getNumberValue_ImplParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberValueAccess().getTemperatureQueryParserRuleCall_1()); }
		ruleTemperatureQuery
		{ after(grammarAccess.getNumberValueAccess().getTemperatureQueryParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNumberValueAccess().getHumidityQueryParserRuleCall_2()); }
		ruleHumidityQuery
		{ after(grammarAccess.getNumberValueAccess().getHumidityQueryParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNumberValueAccess().getVarRefParserRuleCall_3()); }
		ruleVarRef
		{ after(grammarAccess.getNumberValueAccess().getVarRefParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitAccess().getCentimeterParserRuleCall_0()); }
		ruleCentimeter
		{ after(grammarAccess.getUnitAccess().getCentimeterParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getMillimeterParserRuleCall_1()); }
		ruleMillimeter
		{ after(grammarAccess.getUnitAccess().getMillimeterParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getMeterParserRuleCall_2()); }
		ruleMeter
		{ after(grammarAccess.getUnitAccess().getMeterParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getFootParserRuleCall_3()); }
		ruleFoot
		{ after(grammarAccess.getUnitAccess().getFootParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getInchParserRuleCall_4()); }
		ruleInch
		{ after(grammarAccess.getUnitAccess().getInchParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getYardParserRuleCall_5()); }
		ruleYard
		{ after(grammarAccess.getUnitAccess().getYardParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getRadianParserRuleCall_6()); }
		ruleRadian
		{ after(grammarAccess.getUnitAccess().getRadianParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getDegreeParserRuleCall_7()); }
		ruleDegree
		{ after(grammarAccess.getUnitAccess().getDegreeParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getTurnParserRuleCall_8()); }
		ruleTurn
		{ after(grammarAccess.getUnitAccess().getTurnParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getUnitAccess().getGradianParserRuleCall_9()); }
		ruleGradian
		{ after(grammarAccess.getUnitAccess().getGradianParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getStringValue_ImplParserRuleCall_0()); }
		ruleStringValue_Impl
		{ after(grammarAccess.getStringValueAccess().getStringValue_ImplParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringValueAccess().getMessageQueryParserRuleCall_1()); }
		ruleMessageQuery
		{ after(grammarAccess.getStringValueAccess().getMessageQueryParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStringValueAccess().getVarRefParserRuleCall_2()); }
		ruleVarRef
		{ after(grammarAccess.getStringValueAccess().getVarRefParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getBooleanValue_ImplParserRuleCall_0()); }
		ruleBooleanValue_Impl
		{ after(grammarAccess.getBooleanValueAccess().getBooleanValue_ImplParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanValueAccess().getObstacleQueryParserRuleCall_1()); }
		ruleObstacleQuery
		{ after(grammarAccess.getBooleanValueAccess().getObstacleQueryParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanValueAccess().getVarRefParserRuleCall_2()); }
		ruleVarRef
		{ after(grammarAccess.getBooleanValueAccess().getVarRefParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericOperatorAccess().getLtEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getNumericOperatorAccess().getLtEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericOperatorAccess().getEqEnumLiteralDeclaration_1()); }
		('==')
		{ after(grammarAccess.getNumericOperatorAccess().getEqEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getNumericOperatorAccess().getNeqEnumLiteralDeclaration_2()); }
		('<>')
		{ after(grammarAccess.getNumericOperatorAccess().getNeqEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getNumericOperatorAccess().getGtEnumLiteralDeclaration_3()); }
		('>')
		{ after(grammarAccess.getNumericOperatorAccess().getGtEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getNumericOperatorAccess().getLeqEnumLiteralDeclaration_4()); }
		('<=')
		{ after(grammarAccess.getNumericOperatorAccess().getLeqEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getNumericOperatorAccess().getGeqEnumLiteralDeclaration_5()); }
		('>=')
		{ after(grammarAccess.getNumericOperatorAccess().getGeqEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringOperatorAccess().getEqEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getStringOperatorAccess().getEqEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringOperatorAccess().getNeqEnumLiteralDeclaration_1()); }
		('!=')
		{ after(grammarAccess.getStringOperatorAccess().getNeqEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getEqEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getBooleanOperatorAccess().getEqEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOperatorAccess().getNeqEnumLiteralDeclaration_1()); }
		('!=')
		{ after(grammarAccess.getBooleanOperatorAccess().getNeqEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__0__Impl
	rule__Project__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getRaspiProjectKeyword_0()); }
	'raspi-project'
	{ after(grammarAccess.getProjectAccess().getRaspiProjectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__1__Impl
	rule__Project__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__2__Impl
	rule__Project__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getGroup_2()); }
	(rule__Project__Group_2__0)?
	{ after(grammarAccess.getProjectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__3__Impl
	rule__Project__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getProgramAssignment_3()); }
	(rule__Project__ProgramAssignment_3)
	{ after(grammarAccess.getProjectAccess().getProgramAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_2__0__Impl
	rule__Project__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getBoardsKeyword_2_0()); }
	'boards'
	{ after(grammarAccess.getProjectAccess().getBoardsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_2__1__Impl
	rule__Project__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getLeftSquareBracketKeyword_2_1()); }
	'['
	{ after(grammarAccess.getProjectAccess().getLeftSquareBracketKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_2__2__Impl
	rule__Project__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getBoardsAssignment_2_2()); }
	(rule__Project__BoardsAssignment_2_2)*
	{ after(grammarAccess.getProjectAccess().getBoardsAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Project__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectAccess().getRightSquareBracketKeyword_2_3()); }
	']'
	{ after(grammarAccess.getProjectAccess().getRightSquareBracketKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RoverProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group__0__Impl
	rule__RoverProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getRoverProgramAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group__1__Impl
	rule__RoverProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getNameAssignment_1()); }
	(rule__RoverProgram__NameAssignment_1)
	{ after(grammarAccess.getRoverProgramAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group__2__Impl
	rule__RoverProgram__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getRoverProgramAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group__3__Impl
	rule__RoverProgram__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getGroup_3()); }
	(rule__RoverProgram__Group_3__0)?
	{ after(grammarAccess.getRoverProgramAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group__4__Impl
	rule__RoverProgram__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getBlockAssignment_4()); }
	(rule__RoverProgram__BlockAssignment_4)
	{ after(grammarAccess.getRoverProgramAccess().getBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getRoverProgramAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RoverProgram__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group_3__0__Impl
	rule__RoverProgram__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getParamsKeyword_3_0()); }
	'params'
	{ after(grammarAccess.getRoverProgramAccess().getParamsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group_3__1__Impl
	rule__RoverProgram__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getLeftCurlyBracketKeyword_3_1()); }
	'{'
	{ after(grammarAccess.getRoverProgramAccess().getLeftCurlyBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group_3__2__Impl
	rule__RoverProgram__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getParamsAssignment_3_2()); }
	(rule__RoverProgram__ParamsAssignment_3_2)
	{ after(grammarAccess.getRoverProgramAccess().getParamsAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group_3__3__Impl
	rule__RoverProgram__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getGroup_3_3()); }
	(rule__RoverProgram__Group_3_3__0)*
	{ after(grammarAccess.getRoverProgramAccess().getGroup_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getRightCurlyBracketKeyword_3_4()); }
	'}'
	{ after(grammarAccess.getRoverProgramAccess().getRightCurlyBracketKeyword_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RoverProgram__Group_3_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group_3_3__0__Impl
	rule__RoverProgram__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getCommaKeyword_3_3_0()); }
	','
	{ after(grammarAccess.getRoverProgramAccess().getCommaKeyword_3_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoverProgram__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__Group_3_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoverProgramAccess().getParamsAssignment_3_3_1()); }
	(rule__RoverProgram__ParamsAssignment_3_3_1)
	{ after(grammarAccess.getRoverProgramAccess().getParamsAssignment_3_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RasPiBoard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RasPiBoard__Group__0__Impl
	rule__RasPiBoard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRasPiBoardAccess().getNameAssignment_0()); }
	(rule__RasPiBoard__NameAssignment_0)
	{ after(grammarAccess.getRasPiBoardAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RasPiBoard__Group__1__Impl
	rule__RasPiBoard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRasPiBoardAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getRasPiBoardAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RasPiBoard__Group__2__Impl
	rule__RasPiBoard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRasPiBoardAccess().getDigitalPinsAssignment_2()); }
	(rule__RasPiBoard__DigitalPinsAssignment_2)*
	{ after(grammarAccess.getRasPiBoardAccess().getDigitalPinsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RasPiBoard__Group__3__Impl
	rule__RasPiBoard__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRasPiBoardAccess().getAnalogPinsAssignment_3()); }
	(rule__RasPiBoard__AnalogPinsAssignment_3)
	{ after(grammarAccess.getRasPiBoardAccess().getAnalogPinsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RasPiBoard__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRasPiBoardAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRasPiBoardAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DigitalPin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DigitalPin__Group__0__Impl
	rule__DigitalPin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DigitalPin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDigitalPinAccess().getDigitalPinKeyword_0()); }
	'digital-pin'
	{ after(grammarAccess.getDigitalPinAccess().getDigitalPinKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DigitalPin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DigitalPin__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DigitalPin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDigitalPinAccess().getNameAssignment_1()); }
	(rule__DigitalPin__NameAssignment_1)
	{ after(grammarAccess.getDigitalPinAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnalogPin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnalogPin__Group__0__Impl
	rule__AnalogPin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalogPin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnalogPinAccess().getAnalogPinKeyword_0()); }
	'analog-pin'
	{ after(grammarAccess.getAnalogPinAccess().getAnalogPinKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalogPin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnalogPin__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalogPin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnalogPinAccess().getNameAssignment_1()); }
	(rule__AnalogPin__NameAssignment_1)
	{ after(grammarAccess.getAnalogPinAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RclBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RclBlock__Group__0__Impl
	rule__RclBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RclBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRclBlockAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getRclBlockAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RclBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RclBlock__Group__1__Impl
	rule__RclBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RclBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRclBlockAccess().getStmtsAssignment_1()); }
		(rule__RclBlock__StmtsAssignment_1)
		{ after(grammarAccess.getRclBlockAccess().getStmtsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getRclBlockAccess().getStmtsAssignment_1()); }
		(rule__RclBlock__StmtsAssignment_1)*
		{ after(grammarAccess.getRclBlockAccess().getStmtsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RclBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RclBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RclBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRclBlockAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getRclBlockAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssignment__Group__0__Impl
	rule__VarAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignmentAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVarAssignmentAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssignment__Group__1__Impl
	rule__VarAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignmentAccess().getNameAssignment_1()); }
	(rule__VarAssignment__NameAssignment_1)
	{ after(grammarAccess.getVarAssignmentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssignment__Group__2__Impl
	rule__VarAssignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignmentAccess().getColonEqualsSignKeyword_2()); }
	':='
	{ after(grammarAccess.getVarAssignmentAccess().getColonEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignmentAccess().getValueAssignment_3()); }
	(rule__VarAssignment__ValueAssignment_3)
	{ after(grammarAccess.getVarAssignmentAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getConditionalAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getExprAssignment_2()); }
	(rule__Conditional__ExprAssignment_2)
	{ after(grammarAccess.getConditionalAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getConditionalAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__4__Impl
	rule__Conditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getCondTrueAssignment_4()); }
	(rule__Conditional__CondTrueAssignment_4)
	{ after(grammarAccess.getConditionalAccess().getCondTrueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__5__Impl
	rule__Conditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getElseKeyword_5()); }
	'else'
	{ after(grammarAccess.getConditionalAccess().getElseKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getCondFalseAssignment_6()); }
	(rule__Conditional__CondFalseAssignment_6)
	{ after(grammarAccess.getConditionalAccess().getCondFalseAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getLoopAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getExprAssignment_2()); }
	(rule__Loop__ExprAssignment_2)
	{ after(grammarAccess.getLoopAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLoopAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
	rule__Loop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__5__Impl
	rule__Loop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getBlockAssignment_5()); }
	(rule__Loop__BlockAssignment_5)
	{ after(grammarAccess.getLoopAccess().getBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardAction__Group__0__Impl
	rule__ForwardAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardActionAccess().getForwardActionAction_0()); }
	()
	{ after(grammarAccess.getForwardActionAccess().getForwardActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardActionAccess().getForwardKeyword_1()); }
	'forward'
	{ after(grammarAccess.getForwardActionAccess().getForwardKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardMinAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardMinAction__Group__0__Impl
	rule__ForwardMinAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardMinAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardMinActionAccess().getForwardMinActionAction_0()); }
	()
	{ after(grammarAccess.getForwardMinActionAccess().getForwardMinActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardMinAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardMinAction__Group__1__Impl
	rule__ForwardMinAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardMinAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardMinActionAccess().getForwardKeyword_1()); }
	'forward'
	{ after(grammarAccess.getForwardMinActionAccess().getForwardKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardMinAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardMinAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardMinAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardMinActionAccess().getDistanceAssignment_2()); }
	(rule__ForwardMinAction__DistanceAssignment_2)
	{ after(grammarAccess.getForwardMinActionAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BackwardAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackwardAction__Group__0__Impl
	rule__BackwardAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardActionAccess().getBackwardActionAction_0()); }
	()
	{ after(grammarAccess.getBackwardActionAccess().getBackwardActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackwardAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardActionAccess().getBackwardKeyword_1()); }
	'backward'
	{ after(grammarAccess.getBackwardActionAccess().getBackwardKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BackwardMinAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackwardMinAction__Group__0__Impl
	rule__BackwardMinAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardMinAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardMinActionAccess().getBackwardMinActionAction_0()); }
	()
	{ after(grammarAccess.getBackwardMinActionAccess().getBackwardMinActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardMinAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackwardMinAction__Group__1__Impl
	rule__BackwardMinAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardMinAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardMinActionAccess().getBackwardKeyword_1()); }
	'backward'
	{ after(grammarAccess.getBackwardMinActionAccess().getBackwardKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardMinAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackwardMinAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardMinAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardMinActionAccess().getDistanceAssignment_2()); }
	(rule__BackwardMinAction__DistanceAssignment_2)
	{ after(grammarAccess.getBackwardMinActionAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnAction__Group__0__Impl
	rule__TurnAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnActionAccess().getTurnActionAction_0()); }
	()
	{ after(grammarAccess.getTurnActionAccess().getTurnActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnActionAccess().getTurnKeyword_1()); }
	'turn'
	{ after(grammarAccess.getTurnActionAccess().getTurnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnDegAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnDegAction__Group__0__Impl
	rule__TurnDegAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnDegAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnDegActionAccess().getTurnDegActionAction_0()); }
	()
	{ after(grammarAccess.getTurnDegActionAccess().getTurnDegActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnDegAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnDegAction__Group__1__Impl
	rule__TurnDegAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnDegAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnDegActionAccess().getTurnKeyword_1()); }
	'turn'
	{ after(grammarAccess.getTurnDegActionAccess().getTurnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnDegAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnDegAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnDegAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnDegActionAccess().getDegreesAssignment_2()); }
	(rule__TurnDegAction__DegreesAssignment_2)
	{ after(grammarAccess.getTurnDegActionAccess().getDegreesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StopAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopAction__Group__0__Impl
	rule__StopAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StopAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopActionAccess().getStopActionAction_0()); }
	()
	{ after(grammarAccess.getStopActionAccess().getStopActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StopAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopActionAccess().getStopKeyword_1()); }
	'stop'
	{ after(grammarAccess.getStopActionAccess().getStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogAction__Group__0__Impl
	rule__LogAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogActionAccess().getLogActionAction_0()); }
	()
	{ after(grammarAccess.getLogActionAccess().getLogActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogAction__Group__1__Impl
	rule__LogAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogActionAccess().getLogKeyword_1()); }
	'log'
	{ after(grammarAccess.getLogActionAccess().getLogKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogActionAccess().getMessageAssignment_2()); }
	(rule__LogAction__MessageAssignment_2)
	{ after(grammarAccess.getLogActionAccess().getMessageAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SendAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SendAction__Group__0__Impl
	rule__SendAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SendAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSendActionAccess().getSendActionAction_0()); }
	()
	{ after(grammarAccess.getSendActionAccess().getSendActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SendAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SendAction__Group__1__Impl
	rule__SendAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SendAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSendActionAccess().getSendKeyword_1()); }
	'send'
	{ after(grammarAccess.getSendActionAccess().getSendKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SendAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SendAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SendAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSendActionAccess().getMessageAssignment_2()); }
	(rule__SendAction__MessageAssignment_2)
	{ after(grammarAccess.getSendActionAccess().getMessageAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemperatureQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemperatureQuery__Group__0__Impl
	rule__TemperatureQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemperatureQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemperatureQueryAccess().getTemperatureQueryAction_0()); }
	()
	{ after(grammarAccess.getTemperatureQueryAccess().getTemperatureQueryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemperatureQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemperatureQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemperatureQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemperatureQueryAccess().getQueryTempKeyword_1()); }
	'query-temp'
	{ after(grammarAccess.getTemperatureQueryAccess().getQueryTempKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HumidityQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HumidityQuery__Group__0__Impl
	rule__HumidityQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HumidityQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHumidityQueryAccess().getHumidityQueryAction_0()); }
	()
	{ after(grammarAccess.getHumidityQueryAccess().getHumidityQueryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HumidityQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HumidityQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HumidityQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHumidityQueryAccess().getQueryHumidityKeyword_1()); }
	'query-humidity'
	{ after(grammarAccess.getHumidityQueryAccess().getQueryHumidityKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MessageQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageQuery__Group__0__Impl
	rule__MessageQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageQueryAccess().getMessageQueryAction_0()); }
	()
	{ after(grammarAccess.getMessageQueryAccess().getMessageQueryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MessageQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMessageQueryAccess().getQueryMsgKeyword_1()); }
	'query-msg'
	{ after(grammarAccess.getMessageQueryAccess().getQueryMsgKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObstacleQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObstacleQuery__Group__0__Impl
	rule__ObstacleQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObstacleQueryAccess().getObstacleQueryAction_0()); }
	()
	{ after(grammarAccess.getObstacleQueryAccess().getObstacleQueryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObstacleQuery__Group__1__Impl
	rule__ObstacleQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObstacleQueryAccess().getQueryKeyword_1()); }
	'query'
	{ after(grammarAccess.getObstacleQueryAccess().getQueryKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObstacleQuery__Group__2__Impl
	rule__ObstacleQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObstacleQueryAccess().getFrontAssignment_2()); }
	(rule__ObstacleQuery__FrontAssignment_2)?
	{ after(grammarAccess.getObstacleQueryAccess().getFrontAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObstacleQuery__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObstacleQueryAccess().getObstacleKeyword_3()); }
	'obstacle'
	{ after(grammarAccess.getObstacleQueryAccess().getObstacleKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberValue_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue_Impl__Group__0__Impl
	rule__NumberValue_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValue_ImplAccess().getNumberValueAction_0()); }
	()
	{ after(grammarAccess.getNumberValue_ImplAccess().getNumberValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue_Impl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValue_ImplAccess().getQuantityAssignment_1()); }
	(rule__NumberValue_Impl__QuantityAssignment_1)
	{ after(grammarAccess.getNumberValue_ImplAccess().getQuantityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Quantity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantity__Group__0__Impl
	rule__Quantity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantityAccess().getQuantityAction_0()); }
	()
	{ after(grammarAccess.getQuantityAccess().getQuantityAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantity__Group__1__Impl
	rule__Quantity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantityAccess().getValueAssignment_1()); }
	(rule__Quantity__ValueAssignment_1)
	{ after(grammarAccess.getQuantityAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantity__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantityAccess().getUnitAssignment_2()); }
	(rule__Quantity__UnitAssignment_2)
	{ after(grammarAccess.getQuantityAccess().getUnitAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringValue_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringValue_Impl__Group__0__Impl
	rule__StringValue_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringValue_ImplAccess().getStringValueAction_0()); }
	()
	{ after(grammarAccess.getStringValue_ImplAccess().getStringValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringValue_Impl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringValue_ImplAccess().getSValueAssignment_1()); }
	(rule__StringValue_Impl__SValueAssignment_1)
	{ after(grammarAccess.getStringValue_ImplAccess().getSValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanValue_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanValue_Impl__Group__0__Impl
	rule__BooleanValue_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanValue_ImplAccess().getBooleanValueAction_0()); }
	()
	{ after(grammarAccess.getBooleanValue_ImplAccess().getBooleanValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanValue_Impl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanValue_ImplAccess().getBValueAssignment_1()); }
	(rule__BooleanValue_Impl__BValueAssignment_1)
	{ after(grammarAccess.getBooleanValue_ImplAccess().getBValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Centimeter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Centimeter__Group__0__Impl
	rule__Centimeter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Centimeter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCentimeterAccess().getCentimeterAction_0()); }
	()
	{ after(grammarAccess.getCentimeterAccess().getCentimeterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Centimeter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Centimeter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Centimeter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCentimeterAccess().getCmKeyword_1()); }
	'cm'
	{ after(grammarAccess.getCentimeterAccess().getCmKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Millimeter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Millimeter__Group__0__Impl
	rule__Millimeter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Millimeter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMillimeterAccess().getMillimeterAction_0()); }
	()
	{ after(grammarAccess.getMillimeterAccess().getMillimeterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Millimeter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Millimeter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Millimeter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMillimeterAccess().getMmKeyword_1()); }
	'mm'
	{ after(grammarAccess.getMillimeterAccess().getMmKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Meter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Meter__Group__0__Impl
	rule__Meter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Meter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeterAccess().getMeterAction_0()); }
	()
	{ after(grammarAccess.getMeterAccess().getMeterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Meter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Meter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Meter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeterAccess().getMKeyword_1()); }
	'm'
	{ after(grammarAccess.getMeterAccess().getMKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Foot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foot__Group__0__Impl
	rule__Foot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Foot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFootAccess().getFootAction_0()); }
	()
	{ after(grammarAccess.getFootAccess().getFootAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Foot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFootAccess().getFtKeyword_1()); }
	'ft'
	{ after(grammarAccess.getFootAccess().getFtKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Inch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inch__Group__0__Impl
	rule__Inch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInchAccess().getInchAction_0()); }
	()
	{ after(grammarAccess.getInchAccess().getInchAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inch__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInchAccess().getInKeyword_1()); }
	'in'
	{ after(grammarAccess.getInchAccess().getInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Yard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Yard__Group__0__Impl
	rule__Yard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Yard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYardAccess().getYardAction_0()); }
	()
	{ after(grammarAccess.getYardAccess().getYardAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Yard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Yard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Yard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYardAccess().getYdKeyword_1()); }
	'yd'
	{ after(grammarAccess.getYardAccess().getYdKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Radian__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Radian__Group__0__Impl
	rule__Radian__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Radian__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRadianAccess().getRadianAction_0()); }
	()
	{ after(grammarAccess.getRadianAccess().getRadianAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Radian__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Radian__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Radian__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRadianAccess().getRadKeyword_1()); }
	'rad'
	{ after(grammarAccess.getRadianAccess().getRadKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Degree__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Degree__Group__0__Impl
	rule__Degree__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Degree__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDegreeAccess().getDegreeAction_0()); }
	()
	{ after(grammarAccess.getDegreeAccess().getDegreeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Degree__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Degree__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Degree__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDegreeAccess().getDegKeyword_1()); }
	'deg'
	{ after(grammarAccess.getDegreeAccess().getDegKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Turn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__0__Impl
	rule__Turn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getTurnAction_0()); }
	()
	{ after(grammarAccess.getTurnAccess().getTurnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Turn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Turn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnAccess().getTurnKeyword_1()); }
	'turn'
	{ after(grammarAccess.getTurnAccess().getTurnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Gradian__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gradian__Group__0__Impl
	rule__Gradian__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Gradian__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGradianAccess().getGradianAction_0()); }
	()
	{ after(grammarAccess.getGradianAccess().getGradianAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gradian__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gradian__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Gradian__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGradianAccess().getGradKeyword_1()); }
	'grad'
	{ after(grammarAccess.getGradianAccess().getGradKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericExpression__Group__0__Impl
	rule__NumericExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericExpressionAccess().getNumericExpressionAction_0()); }
	()
	{ after(grammarAccess.getNumericExpressionAccess().getNumericExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericExpression__Group__1__Impl
	rule__NumericExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericExpressionAccess().getLhsAssignment_1()); }
	(rule__NumericExpression__LhsAssignment_1)
	{ after(grammarAccess.getNumericExpressionAccess().getLhsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericExpression__Group__2__Impl
	rule__NumericExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericExpressionAccess().getOpAssignment_2()); }
	(rule__NumericExpression__OpAssignment_2)
	{ after(grammarAccess.getNumericExpressionAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericExpressionAccess().getRhsAssignment_3()); }
	(rule__NumericExpression__RhsAssignment_3)
	{ after(grammarAccess.getNumericExpressionAccess().getRhsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringExpression__Group__0__Impl
	rule__StringExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringExpressionAccess().getStringExpressionAction_0()); }
	()
	{ after(grammarAccess.getStringExpressionAccess().getStringExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringExpression__Group__1__Impl
	rule__StringExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringExpressionAccess().getLhsAssignment_1()); }
	(rule__StringExpression__LhsAssignment_1)
	{ after(grammarAccess.getStringExpressionAccess().getLhsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringExpression__Group__2__Impl
	rule__StringExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringExpressionAccess().getOpAssignment_2()); }
	(rule__StringExpression__OpAssignment_2)
	{ after(grammarAccess.getStringExpressionAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringExpressionAccess().getRhsAssignment_3()); }
	(rule__StringExpression__RhsAssignment_3)
	{ after(grammarAccess.getStringExpressionAccess().getRhsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__0__Impl
	rule__BooleanExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0()); }
	()
	{ after(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__1__Impl
	rule__BooleanExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getLhsAssignment_1()); }
	(rule__BooleanExpression__LhsAssignment_1)
	{ after(grammarAccess.getBooleanExpressionAccess().getLhsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__2__Impl
	rule__BooleanExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getOpAssignment_2()); }
	(rule__BooleanExpression__OpAssignment_2)
	{ after(grammarAccess.getBooleanExpressionAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getRhsAssignment_3()); }
	(rule__BooleanExpression__RhsAssignment_3)
	{ after(grammarAccess.getBooleanExpressionAccess().getRhsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pin_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin_Impl__Group__0__Impl
	rule__Pin_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPin_ImplAccess().getPinKeyword_0()); }
	'pin'
	{ after(grammarAccess.getPin_ImplAccess().getPinKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin_Impl__Group__1__Impl
	rule__Pin_Impl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPin_ImplAccess().getNameAssignment_1()); }
	(rule__Pin_Impl__NameAssignment_1)
	{ after(grammarAccess.getPin_ImplAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin_Impl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPin_ImplAccess().getGroup_2()); }
	(rule__Pin_Impl__Group_2__0)?
	{ after(grammarAccess.getPin_ImplAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pin_Impl__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin_Impl__Group_2__0__Impl
	rule__Pin_Impl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPin_ImplAccess().getLeftSquareBracketKeyword_2_0()); }
	'['
	{ after(grammarAccess.getPin_ImplAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin_Impl__Group_2__1__Impl
	rule__Pin_Impl__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPin_ImplAccess().getLevelAssignment_2_1()); }
	(rule__Pin_Impl__LevelAssignment_2_1)
	{ after(grammarAccess.getPin_ImplAccess().getLevelAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pin_Impl__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPin_ImplAccess().getRightSquareBracketKeyword_2_2()); }
	']'
	{ after(grammarAccess.getPin_ImplAccess().getRightSquareBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Project__BoardsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectAccess().getBoardsBoardParserRuleCall_2_2_0()); }
		ruleBoard
		{ after(grammarAccess.getProjectAccess().getBoardsBoardParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__ProgramAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectAccess().getProgramRoverProgramParserRuleCall_3_0()); }
		ruleRoverProgram
		{ after(grammarAccess.getProjectAccess().getProgramRoverProgramParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoverProgramAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRoverProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__ParamsAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoverProgramAccess().getParamsParamParserRuleCall_3_2_0()); }
		ruleParam
		{ after(grammarAccess.getRoverProgramAccess().getParamsParamParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__ParamsAssignment_3_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoverProgramAccess().getParamsParamParserRuleCall_3_3_1_0()); }
		ruleParam
		{ after(grammarAccess.getRoverProgramAccess().getParamsParamParserRuleCall_3_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoverProgram__BlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoverProgramAccess().getBlockRclBlockParserRuleCall_4_0()); }
		ruleRclBlock
		{ after(grammarAccess.getRoverProgramAccess().getBlockRclBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRasPiBoardAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRasPiBoardAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__DigitalPinsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRasPiBoardAccess().getDigitalPinsDigitalPinParserRuleCall_2_0()); }
		ruleDigitalPin
		{ after(grammarAccess.getRasPiBoardAccess().getDigitalPinsDigitalPinParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RasPiBoard__AnalogPinsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRasPiBoardAccess().getAnalogPinsAnalogPinParserRuleCall_3_0()); }
		ruleAnalogPin
		{ after(grammarAccess.getRasPiBoardAccess().getAnalogPinsAnalogPinParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DigitalPin__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDigitalPinAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDigitalPinAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnalogPin__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnalogPinAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAnalogPinAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RclBlock__StmtsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRclBlockAccess().getStmtsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getRclBlockAccess().getStmtsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAssignmentAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarAssignmentAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAssignmentAccess().getValueRoverValueParserRuleCall_3_0()); }
		ruleRoverValue
		{ after(grammarAccess.getVarAssignmentAccess().getValueRoverValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getExprRoverExpressionParserRuleCall_2_0()); }
		ruleRoverExpression
		{ after(grammarAccess.getConditionalAccess().getExprRoverExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__CondTrueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getCondTrueRclBlockParserRuleCall_4_0()); }
		ruleRclBlock
		{ after(grammarAccess.getConditionalAccess().getCondTrueRclBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__CondFalseAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getCondFalseRclBlockParserRuleCall_6_0()); }
		ruleRclBlock
		{ after(grammarAccess.getConditionalAccess().getCondFalseRclBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getExprRoverExpressionParserRuleCall_2_0()); }
		ruleRoverExpression
		{ after(grammarAccess.getLoopAccess().getExprRoverExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__BlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getBlockRclBlockParserRuleCall_5_0()); }
		ruleRclBlock
		{ after(grammarAccess.getLoopAccess().getBlockRclBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardMinAction__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForwardMinActionAccess().getDistanceNumberValueParserRuleCall_2_0()); }
		ruleNumberValue
		{ after(grammarAccess.getForwardMinActionAccess().getDistanceNumberValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackwardMinAction__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBackwardMinActionAccess().getDistanceNumberValueParserRuleCall_2_0()); }
		ruleNumberValue
		{ after(grammarAccess.getBackwardMinActionAccess().getDistanceNumberValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnDegAction__DegreesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnDegActionAccess().getDegreesNumberValueParserRuleCall_2_0()); }
		ruleNumberValue
		{ after(grammarAccess.getTurnDegActionAccess().getDegreesNumberValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogAction__MessageAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogActionAccess().getMessageSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getLogActionAccess().getMessageSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SendAction__MessageAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSendActionAccess().getMessageSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getSendActionAccess().getMessageSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRef__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarRefAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVarRefAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleQuery__FrontAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObstacleQueryAccess().getFrontFrontKeyword_2_0()); }
		(
			{ before(grammarAccess.getObstacleQueryAccess().getFrontFrontKeyword_2_0()); }
			'front'
			{ after(grammarAccess.getObstacleQueryAccess().getFrontFrontKeyword_2_0()); }
		)
		{ after(grammarAccess.getObstacleQueryAccess().getFrontFrontKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue_Impl__QuantityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValue_ImplAccess().getQuantityQuantityParserRuleCall_1_0()); }
		ruleQuantity
		{ after(grammarAccess.getNumberValue_ImplAccess().getQuantityQuantityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantityAccess().getValueDOUBLETerminalRuleCall_1_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getQuantityAccess().getValueDOUBLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantity__UnitAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantityAccess().getUnitUnitParserRuleCall_2_0()); }
		ruleUnit
		{ after(grammarAccess.getQuantityAccess().getUnitUnitParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue_Impl__SValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValue_ImplAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValue_ImplAccess().getSValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue_Impl__BValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValue_ImplAccess().getBValueTrueKeyword_1_0()); }
		(
			{ before(grammarAccess.getBooleanValue_ImplAccess().getBValueTrueKeyword_1_0()); }
			'true'
			{ after(grammarAccess.getBooleanValue_ImplAccess().getBValueTrueKeyword_1_0()); }
		)
		{ after(grammarAccess.getBooleanValue_ImplAccess().getBValueTrueKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__LhsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericExpressionAccess().getLhsNumberValueParserRuleCall_1_0()); }
		ruleNumberValue
		{ after(grammarAccess.getNumericExpressionAccess().getLhsNumberValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericExpressionAccess().getOpNumericOperatorEnumRuleCall_2_0()); }
		ruleNumericOperator
		{ after(grammarAccess.getNumericExpressionAccess().getOpNumericOperatorEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericExpression__RhsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericExpressionAccess().getRhsNumberValueParserRuleCall_3_0()); }
		ruleNumberValue
		{ after(grammarAccess.getNumericExpressionAccess().getRhsNumberValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__LhsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getLhsStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getStringExpressionAccess().getLhsStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getOpStringOperatorEnumRuleCall_2_0()); }
		ruleStringOperator
		{ after(grammarAccess.getStringExpressionAccess().getOpStringOperatorEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__RhsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getRhsStringValueParserRuleCall_3_0()); }
		ruleStringValue
		{ after(grammarAccess.getStringExpressionAccess().getRhsStringValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__LhsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getLhsBooleanValueParserRuleCall_1_0()); }
		ruleBooleanValue
		{ after(grammarAccess.getBooleanExpressionAccess().getLhsBooleanValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getOpBooleanOperatorEnumRuleCall_2_0()); }
		ruleBooleanOperator
		{ after(grammarAccess.getBooleanExpressionAccess().getOpBooleanOperatorEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__RhsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getRhsBooleanValueParserRuleCall_3_0()); }
		ruleBooleanValue
		{ after(grammarAccess.getBooleanExpressionAccess().getRhsBooleanValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPin_ImplAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPin_ImplAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pin_Impl__LevelAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPin_ImplAccess().getLevelINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPin_ImplAccess().getLevelINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
